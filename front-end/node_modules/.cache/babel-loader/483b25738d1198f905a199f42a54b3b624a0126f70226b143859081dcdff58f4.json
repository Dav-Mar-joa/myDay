{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Line}from'react-chartjs-2';import axios from'axios';import LogoutButton from'./LogoutButton';// Importer le composant LogoutButton\nimport{Link}from'react-router-dom';import{Chart as ChartJS,CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend}from'chart.js';import zoomPlugin from'chartjs-plugin-zoom';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(zoomPlugin);ChartJS.register(CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend);const Historique=()=>{const[chartData,setChartData]=useState({});const[feelings,setFeelings]=useState([\"\",\"\",\"\",\"\"]);const[phraseGratitude,setPhraseGratitude]=useState(\"\");const[historiqueGratitude,setHistoriqueGratitude]=useState([]);const[gratitudeDates,setDatesGratitude]=useState([]);const[reglesDates,setReglesDates]=useState([]);const[theme,setTheme]=useState(\"\");// const[options,setOptions]=useState({})\nconst[showFeeling1,setShowFeeling1]=useState(true);const[showFeeling2,setShowFeeling2]=useState(true);const[showFeeling3,setShowFeeling3]=useState(true);const[showFeeling4,setShowFeeling4]=useState(true);const[showRegles,setShowRegles]=useState(true);const[timeRange,setTimeRange]=useState('3mois');const filtrerDonneesParTemps=(data,range)=>{const maintenant=new Date();let limite;switch(range){case'24heures':limite=new Date(maintenant.setHours(maintenant.getHours()-24));break;case'1semaine':limite=new Date(maintenant.setDate(maintenant.getDate()-7));break;// case '2semaine':\n// limite = new Date(maintenant.setDate(maintenant.getDate() - 14));\n// break;\ncase'1mois':// limite = new Date(maintenant.setMonth(maintenant.getMonth() - 1));\nlimite=new Date(maintenant.setMonth(maintenant.getMonth()-1));break;case'3mois':// limite = new Date(maintenant.setMonth(maintenant.getMonth() - 3));\nlimite=new Date(maintenant.setMonth(maintenant.getMonth()-3));break;case'6mois':// limite = new Date(maintenant.setMonth(maintenant.getMonth() - 6));\nlimite=new Date(maintenant.setMonth(maintenant.getMonth()-6));break;default:return data;}return data.filter(entry=>new Date(entry.userLocalDate)>=limite);};// useEffect(() => {\n//   const fetchUserFeelingsAndHistory = async () => {\n//     try {\n//       const API_URL =\n//         window.location.hostname === \"localhost\"\n//           ? \"http://localhost:4000\"\n//           : \"https://myday-back.onrender.com\";\n//       const feelingsResponse = await fetch(`${API_URL}/user-feelings`, {\n//         method: \"GET\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         credentials: 'include'\n//       });\n//       const feelingsData = await feelingsResponse.json();\n//       if (feelingsData && feelingsData.feelings) {\n//         setFeelings(feelingsData.feelings);\n//         setPhraseGratitude(feelingsData.phraseGratitude || []);\n//         setReglesDates(feelingsData.regles || []);\n//       }\n//       const historyResponse = await axios.get(`${API_URL}/user-history`, {\n//         withCredentials: true,\n//       });\n//       const historyData = historyResponse.data;\n//       historyData.sort((a, b) => new Date(a.userLocalDate) - new Date(b.userLocalDate));\n//       const labels = historyData.map(entry => {\n//         const date = new Date(entry.userLocalDate);\n//         return date.toLocaleDateString('fr-FR', {\n//           day: '2-digit',\n//           month: 'short',\n//         });\n//       });\n//       const gratitudeHistory = historyData\n//         .map(entry => entry.phraseGratitude)\n//         .filter(phrase => phrase && phrase.trim() !== \"\");\n//       const gratitudeDates = historyData\n//         .map(entry => new Date(entry.userLocalDate).toLocaleDateString())\n//         .filter((_, index) => gratitudeHistory[index]);\n//       setDatesGratitude(gratitudeDates);\n//       setHistoriqueGratitude(gratitudeHistory);\n//       const data = {\n//         labels,\n//         datasets: [\n//           {\n//             label: feelings[0],\n//             data: historyData.map(entry => entry.feeling1),\n//             borderColor: 'rgba(75, 192, 192, 1)',\n//             borderWidth: 2,\n//             pointRadius: 1,\n//             pointHoverRadius: 4,\n//             fill: false,\n//             hidden: !showFeeling1\n//           },\n//           {\n//             label: feelings[1],\n//             data: historyData.map(entry => entry.feeling2),\n//             borderColor: 'rgba(153, 102, 255, 1)',\n//             borderWidth: 2,\n//             pointRadius: 1,\n//             pointHoverRadius: 4,\n//             fill: false,\n//             hidden: !showFeeling2\n//           },\n//           {\n//             label: feelings[2],\n//             data: historyData.map(entry => entry.feeling3),\n//             borderColor: 'rgba(255, 99, 132, 1)',\n//             borderWidth: 2,\n//             pointRadius: 1,\n//             pointHoverRadius: 4,\n//             fill: false,\n//             hidden: !showFeeling3\n//           },\n//           {\n//             label: feelings[3],\n//             data: historyData.map(entry => entry.feeling4),\n//             borderColor: 'rgba(255, 206, 86, 1)',\n//             borderWidth: 2,\n//             pointRadius: 1,\n//             pointHoverRadius: 4,\n//             fill: false,\n//             hidden: !showFeeling4\n//           },\n//           {\n//             label: 'Règles',\n//             data: reglesDates.map((regle, index) => {\n//               return regle === true ? 0 : null;\n//             }),\n//             borderColor: 'rgba(0, 0, 0, 1)',\n//             backgroundColor: 'rgba(0, 0, 0, 1)',\n//             borderWidth: 4,\n//             pointRadius: 4,\n//             pointHoverRadius: 4,\n//             fill: true,\n//             hidden: !showRegles\n//           }\n//         ],\n//       };\n//       setChartData(data);\n//     } catch (error) {\n//       console.error(\"Erreur lors de la récupération des données :\", error);\n//     }\n//   };\n//   fetchUserFeelingsAndHistory();\n// }, [feelings, reglesDates, showFeeling1, showFeeling2, showFeeling3, showFeeling4, showRegles]);\nuseEffect(()=>{window.scrollTo(0,0);const fetchUserFeelingsAndHistory=async()=>{try{const API_URL=window.location.hostname===\"localhost\"?\"http://localhost:4000\":\"https://myday-back.onrender.com\";const feelingsResponse=await fetch(`${API_URL}/user-feelings`,{method:\"GET\",headers:{\"Content-Type\":\"application/json\"},credentials:'include'});const feelingsData=await feelingsResponse.json();console.log(\"theme dans historique !! : \",feelingsData.theme);// document.body.className = feelingsData.theme;\nsetTheme(feelingsData.theme);// setOptions(feelingsData.theme)\ndocument.body.className=feelingsData.theme;// cons.log(\"feelingsData  :\",feelingsData )\nif(feelingsData&&feelingsData.feelings){// Ne relance pas setFeelings inutilement si les valeurs sont déjà identiques\nsetFeelings(prev=>JSON.stringify(prev)!==JSON.stringify(feelingsData.feelings)?feelingsData.feelings:prev);setPhraseGratitude(feelingsData.phraseGratitude||[]);setReglesDates(feelingsData.regles||[]);}const historyResponse=await axios.get(`${API_URL}/user-history`,{withCredentials:true});// conseol.log(\"historyResponse :\",historyResponse)\nconst historyData=historyResponse.data;// historyData.sort((a, b) => new Date(a.userLocalDate) - new Date(b.userLocalDate));\nhistoryData.sort((a,b)=>new Date(a.userLocalDate)-new Date(b.userLocalDate));const filteredHistory=filtrerDonneesParTemps(historyData,timeRange);const labels=filteredHistory.map(entry=>{const date=new Date(entry.userLocalDate);return date.toLocaleDateString('fr-FR',{day:'2-digit',month:'short'});});const gratitudeHistory=historyData.map(entry=>entry.phraseGratitude).filter(phrase=>phrase&&phrase.trim()!==\"\");const gratitudeDates=historyData.map(entry=>new Date(entry.userLocalDate).toLocaleDateString()).filter((_,index)=>gratitudeHistory[index]);setDatesGratitude(gratitudeDates);setHistoriqueGratitude(gratitudeHistory);let data={};if(feelingsData.theme===\"dark\"){var _feelingsData$regles;data={labels,datasets:[{label:feelingsData.feelings[0],data:historyData.map(entry=>entry.feeling1),borderColor:'rgba(75, 192, 192, 1)',// Turquoise\n// borderColor: 'rgb(255, 255, 255)', \nborderWidth:2,pointRadius:4,// Plus grand pour mieux se voir\npointHoverRadius:8,pointStyle:'circle',// Type de point : Cercle\nfill:false,hidden:!showFeeling1},{label:feelingsData.feelings[1],data:historyData.map(entry=>entry.feeling2),borderColor:'rgba(153, 102, 255, 1)',// Violet\n// borderColor: 'rgb(255, 255, 255)',\nborderWidth:2,pointRadius:4,pointHoverRadius:8,pointStyle:'triangle',// Type de point : Triangle\nfill:false,hidden:!showFeeling2},{label:feelingsData.feelings[2],data:historyData.map(entry=>entry.feeling3),borderColor:'rgba(255, 99, 132, 1)',// Rose\n// borderColor: 'rgb(255, 255, 255)',\nborderWidth:2,pointRadius:4,pointHoverRadius:8,pointStyle:'rect',// Type de point : Carré\nfill:false,hidden:!showFeeling3},{label:feelingsData.feelings[3],data:historyData.map(entry=>entry.feeling4),borderColor:'rgba(255, 206, 86, 1)',// Jaune\n// borderColor: 'rgb(255, 255, 255)',\nborderWidth:2,pointRadius:4,pointHoverRadius:8,pointStyle:'star',// Type de point : Étoile\nfill:false,hidden:!showFeeling4},{label:'Règles',data:((_feelingsData$regles=feelingsData.regles)===null||_feelingsData$regles===void 0?void 0:_feelingsData$regles.map(regle=>regle===true?0:null))||[],// borderColor: 'rgb(255, 255, 255)',\nbackgroundColor:'rgb(240, 78, 210)',borderColor:'rgb(223, 215, 215)',borderWidth:2,pointRadius:4,pointHoverRadius:4,fill:true,hidden:!showRegles}]};}else{var _feelingsData$regles2;data={labels,datasets:[{label:feelingsData.feelings[0],data:historyData.map(entry=>entry.feeling1),borderColor:'rgba(75, 192, 192, 1)',// Turquoise\nborderWidth:2,pointRadius:4,// Plus grand pour mieux se voir\npointHoverRadius:8,pointStyle:'circle',// Type de point : Cercle\nfill:false,hidden:!showFeeling1},{label:feelingsData.feelings[1],data:historyData.map(entry=>entry.feeling2),borderColor:'rgba(153, 102, 255, 1)',// Violet\nborderWidth:2,pointRadius:4,pointHoverRadius:8,pointStyle:'triangle',// Type de point : Triangle\nfill:false,hidden:!showFeeling2},{label:feelingsData.feelings[2],data:historyData.map(entry=>entry.feeling3),borderColor:'rgba(255, 99, 132, 1)',// Rose\nborderWidth:2,pointRadius:4,pointHoverRadius:8,pointStyle:'rect',// Type de point : Carré\nfill:false,hidden:!showFeeling3},{label:feelingsData.feelings[3],data:historyData.map(entry=>entry.feeling4),borderColor:'rgba(255, 206, 86, 1)',// Jaune\nborderWidth:2,pointRadius:4,pointHoverRadius:8,pointStyle:'star',// Type de point : Étoile\nfill:false,hidden:!showFeeling4},{label:'Règles',data:((_feelingsData$regles2=feelingsData.regles)===null||_feelingsData$regles2===void 0?void 0:_feelingsData$regles2.map(regle=>regle===true?0:null))||[],borderColor:'rgb(0, 0, 0)',backgroundColor:'rgb(0, 0, 0)',borderWidth:2,pointRadius:4,pointHoverRadius:4,fill:true,hidden:!showRegles}]};}// let options={}\n// if(options===\"dark\"){ \n//   options = {\n//     responsive: true,\n//     maintainAspectRatio: false,\n//     scales: {\n//       x: {\n//         ticks: {\n//           font: {\n//             weight: 'bold',\n//           },\n//           color: 'white', // Couleur du texte sur l'axe X\n//         },\n//         grid: {\n//           color: 'rgb(253, 253, 253)', // Optionnel : couleur des lignes de la grille\n//         },\n//       },\n//       y: {\n//         ticks: {\n//           font: {\n//             weight: 'bold',\n//           },\n//           color: 'white', // Couleur du texte sur l'axe Y\n//         },\n//         grid: {\n//           color: 'rgb(253, 253, 253)', // Optionnel\n//         },\n//       },\n//     },\n//     plugins: {\n//       legend: {\n//         display: true,\n//         position: 'top',\n//         labels: {\n//           font: {\n//             size: 14,\n//             family: 'Arial',\n//             weight: 'bold',\n//           },\n//           color: 'white', // Couleur du texte de la légende\n//           boxWidth: 15,\n//           boxHeight: 5,\n//           padding: 20,\n//           usePointStyle: true,\n//         },\n//       },\n//       zoom: {\n//         pan: {\n//           enabled: true,\n//           mode: 'x',\n//         },\n//         zoom: {\n//           wheel: {\n//             enabled: true,\n//           },\n//           pinch: {\n//             enabled: true,\n//           },\n//           mode: 'x',\n//         },\n//       },\n//     },\n//   };        \n// } else {\n//   options = {\n//     responsive: true,\n//     maintainAspectRatio: false,\n//     scales: {\n//       x: {\n//         ticks: {\n//           font: {\n//             weight: 'bold',\n//           },\n//         },\n//       },\n//     },\n//     plugins: {\n//       legend: {\n//         display: true,\n//         position: 'top',  // Position de la légende\n//         labels: {\n//           font: {\n//             size: 14,\n//             family: 'Arial',\n//             weight: 'bold',\n//           },\n//           boxWidth: 15,\n//           boxHeight: 5,\n//           marginTop: 10,\n//           marginBottom: 10,\n//           padding: 20,\n//           color: '#333',\n//           usePointStyle: true,\n//         },\n//         // Ajout de la bordure autour de la légende entière\n//         onBeforeInit: (chart) => {\n//           const legend = chart.legend;\n//           legend.boxWidth = 30;  // Largeur de la légende (ajustez selon votre besoin)\n//           legend.labels.padding = 10;  // Espacement entre les labels\n//           legend.borderColor = '#333';  // Couleur de la bordure\n//           legend.borderWidth = 2;  // Largeur de la bordure\n//           legend.borderRadius = 5;  // Rayon des coins\n//           legend.backgroundColor = 'rgba(255, 255, 255, 0.7)';  // Fond de la légende (transparent ou couleur de fond)\n//         },\n//       },\n//       zoom: {\n//         pan: {\n//           enabled: true,\n//           mode: 'x',\n//         },\n//         zoom: {\n//           wheel: {\n//             enabled: true,\n//           },\n//           pinch: {\n//             enabled: true,\n//           },\n//           mode: 'x',\n//         },\n//       },\n//     },\n//   };\n// }\nsetChartData(data);}catch(error){console.error(\"Erreur lors de la récupération des données :\",error);}};fetchUserFeelingsAndHistory();},[showFeeling1,showFeeling2,showFeeling3,showFeeling4,showRegles,timeRange]);// const options = {\n//   responsive: true,\n//   maintainAspectRatio: false,\n//   scales: {\n//     x: {\n//       ticks: {\n//         font: {\n//           weight: 'bold',\n//         },\n//       },\n//     },\n//   },\n//   plugins: {\n//     legend: {\n//       display: true,\n//       position: 'top',  // Position de la légende\n//       labels: {\n//         font: {\n//           size: 14,\n//           family: 'Arial',\n//           weight: 'bold',\n//         },\n//         boxWidth: 15,\n//         boxHeight: 5,\n//         marginTop: 10,\n//         marginBottom: 10,\n//         padding: 20,\n//         color: '#333',\n//         usePointStyle: true,\n//       },\n//       // Ajout de la bordure autour de la légende entière\n//       onBeforeInit: (chart) => {\n//         const legend = chart.legend;\n//         legend.boxWidth = 30;  // Largeur de la légende (ajustez selon votre besoin)\n//         legend.labels.padding = 10;  // Espacement entre les labels\n//         legend.borderColor = '#333';  // Couleur de la bordure\n//         legend.borderWidth = 2;  // Largeur de la bordure\n//         legend.borderRadius = 5;  // Rayon des coins\n//         legend.backgroundColor = 'rgba(255, 255, 255, 0.7)';  // Fond de la légende (transparent ou couleur de fond)\n//       },\n//     },\n//     zoom: {\n//       pan: {\n//         enabled: true,\n//         mode: 'x',\n//       },\n//       zoom: {\n//         wheel: {\n//           enabled: true,\n//         },\n//         pinch: {\n//           enabled: true,\n//         },\n//         mode: 'x',\n//       },\n//     },\n//   },\n// };\nlet options={};if(theme===\"dark\"){options={responsive:true,maintainAspectRatio:false,scales:{x:{ticks:{font:{weight:'bold'},color:'white'// Couleur du texte sur l'axe X\n},grid:{color:'rgb(253, 253, 253)',// Optionnel : couleur des lignes de la grille\nlineWidth:0.5}},y:{ticks:{font:{weight:'bold'},color:'white'// Couleur du texte sur l'axe Y\n},grid:{color:'rgb(253, 253, 253)',// Optionnel\nlineWidth:0.5}}},plugins:{legend:{display:true,position:'top',labels:{font:{size:14,family:'Arial',weight:'bold'},color:'white',// Couleur du texte de la légende\nboxWidth:15,boxHeight:5,padding:20,usePointStyle:true}},zoom:{pan:{enabled:true,mode:'x'},zoom:{wheel:{enabled:true},pinch:{enabled:true},mode:'x'}}}};}else{options={responsive:true,maintainAspectRatio:false,scales:{x:{ticks:{font:{weight:'bold'}}}},plugins:{legend:{display:true,position:'top',// Position de la légende\nlabels:{font:{size:14,family:'Arial',weight:'bold'},boxWidth:15,boxHeight:5,marginTop:10,marginBottom:10,padding:20,color:'#333',usePointStyle:true},// Ajout de la bordure autour de la légende entière\nonBeforeInit:chart=>{const legend=chart.legend;legend.boxWidth=30;// Largeur de la légende (ajustez selon votre besoin)\nlegend.labels.padding=10;// Espacement entre les labels\nlegend.borderColor='#333';// Couleur de la bordure\nlegend.borderWidth=2;// Largeur de la bordure\nlegend.borderRadius=5;// Rayon des coins\nlegend.backgroundColor='rgba(255, 255, 255, 0.7)';// Fond de la légende (transparent ou couleur de fond)\n}},zoom:{pan:{enabled:true,mode:'x'},zoom:{wheel:{enabled:true},pinch:{enabled:true},mode:'x'}}}};}return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"h6\",{children:\"Historique des \\xC9motions\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"time-filter\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>setTimeRange('24heures'),children:\"1 jour\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setTimeRange('1semaine'),children:\"1 semaine\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setTimeRange('1mois'),children:\"1 mois\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setTimeRange('3mois'),children:\"3 mois\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setTimeRange('6mois'),children:\"6 mois\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setTimeRange('tout'),children:\"Tout\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chart-container\",children:chartData.labels&&/*#__PURE__*/_jsx(Line,{data:chartData,options:options})}),/*#__PURE__*/_jsxs(\"div\",{className:\"checkbox-container\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:showFeeling1,onChange:()=>setShowFeeling1(!showFeeling1)}),feelings[0]]}),/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:showFeeling2,onChange:()=>setShowFeeling2(!showFeeling2)}),feelings[1]]}),/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:showFeeling3,onChange:()=>setShowFeeling3(!showFeeling3)}),feelings[2]]}),/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:showFeeling4,onChange:()=>setShowFeeling4(!showFeeling4)}),feelings[3]]}),/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:showRegles,onChange:()=>setShowRegles(!showRegles)}),\"R\\xE8gles\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"historique-gratitude\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"h7\",children:\"Historique des mantras\"}),/*#__PURE__*/_jsx(\"div\",{className:\"fenetre-gratitude\",children:historiqueGratitude.length>0?historiqueGratitude.map((phrase,index)=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"p\",{children:[phrase,\" : (\",/*#__PURE__*/_jsxs(\"em\",{children:[gratitudeDates[index],\")\"]})]}),/*#__PURE__*/_jsx(\"hr\",{className:\"hr-phraseGratitude\"})]},index)):/*#__PURE__*/_jsx(\"li\",{children:\"Aucune phrase de gratitude disponible\"})})]}),/*#__PURE__*/_jsx(Link,{to:\"/\",children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"submit-button-history\",children:\"Emotions\"})}),/*#__PURE__*/_jsx(\"p\",{className:\"droits\",children:\"\\xA9 2025 myDay. Tous droits r\\xE9serv\\xE9s. Cette application, ainsi que l\\u2019ensemble de son contenu, est prot\\xE9g\\xE9e par les lois en vigueur relatives \\xE0 la propri\\xE9t\\xE9 intellectuelle. Les donn\\xE9es qu\\u2019elle contient sont chiffr\\xE9es afin d\\u2019en garantir la s\\xE9curit\\xE9. \"})]})});};export default Historique;// { \"pseudo\": { \"$eq\": \"qs\"} }","map":{"version":3,"names":["React","useState","useEffect","Line","axios","LogoutButton","Link","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","zoomPlugin","jsx","_jsx","jsxs","_jsxs","register","Historique","chartData","setChartData","feelings","setFeelings","phraseGratitude","setPhraseGratitude","historiqueGratitude","setHistoriqueGratitude","gratitudeDates","setDatesGratitude","reglesDates","setReglesDates","theme","setTheme","showFeeling1","setShowFeeling1","showFeeling2","setShowFeeling2","showFeeling3","setShowFeeling3","showFeeling4","setShowFeeling4","showRegles","setShowRegles","timeRange","setTimeRange","filtrerDonneesParTemps","data","range","maintenant","Date","limite","setHours","getHours","setDate","getDate","setMonth","getMonth","filter","entry","userLocalDate","window","scrollTo","fetchUserFeelingsAndHistory","API_URL","location","hostname","feelingsResponse","fetch","method","headers","credentials","feelingsData","json","console","log","document","body","className","prev","JSON","stringify","regles","historyResponse","get","withCredentials","historyData","sort","a","b","filteredHistory","labels","map","date","toLocaleDateString","day","month","gratitudeHistory","phrase","trim","_","index","_feelingsData$regles","datasets","label","feeling1","borderColor","borderWidth","pointRadius","pointHoverRadius","pointStyle","fill","hidden","feeling2","feeling3","feeling4","regle","backgroundColor","_feelingsData$regles2","error","options","responsive","maintainAspectRatio","scales","x","ticks","font","weight","color","grid","lineWidth","y","plugins","legend","display","position","size","family","boxWidth","boxHeight","padding","usePointStyle","zoom","pan","enabled","mode","wheel","pinch","marginTop","marginBottom","onBeforeInit","chart","borderRadius","children","onClick","type","checked","onChange","length","to"],"sources":["C:/Users/850_G5/Documents/Formation_Dot_Net/myday/front-end/src/Historique.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport LogoutButton from './LogoutButton'; // Importer le composant LogoutButton\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport zoomPlugin from 'chartjs-plugin-zoom';\r\nChartJS.register(zoomPlugin);\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst Historique = () => {\r\n  const [chartData, setChartData] = useState({});\r\n  const [feelings, setFeelings] = useState([\"\", \"\", \"\", \"\"]);\r\n  const [phraseGratitude, setPhraseGratitude] = useState(\"\");\r\n  const [historiqueGratitude, setHistoriqueGratitude] = useState([]);\r\n  const [gratitudeDates, setDatesGratitude] = useState([]);\r\n  const [reglesDates, setReglesDates] = useState([]);\r\n  const[theme,setTheme]=useState(\"\")\r\n  // const[options,setOptions]=useState({})\r\n  \r\n  const [showFeeling1, setShowFeeling1] = useState(true);\r\n  const [showFeeling2, setShowFeeling2] = useState(true);\r\n  const [showFeeling3, setShowFeeling3] = useState(true);\r\n  const [showFeeling4, setShowFeeling4] = useState(true);\r\n  const [showRegles, setShowRegles] = useState(true);\r\n\r\n  const [timeRange, setTimeRange] = useState('3mois');\r\n\r\nconst filtrerDonneesParTemps = (data, range) => {\r\n  const maintenant = new Date();\r\n  let limite;\r\n\r\n  switch (range) {\r\n    case '24heures':\r\n      limite = new Date(maintenant.setHours(maintenant.getHours() - 24));\r\n      break;\r\n    case '1semaine':\r\n      limite = new Date(maintenant.setDate(maintenant.getDate() - 7));\r\n      break;\r\n      // case '2semaine':\r\n      // limite = new Date(maintenant.setDate(maintenant.getDate() - 14));\r\n      // break;\r\n    case '1mois':\r\n      // limite = new Date(maintenant.setMonth(maintenant.getMonth() - 1));\r\n      limite = new Date(maintenant.setMonth(maintenant.getMonth() - 1));\r\n      break;\r\n    case '3mois':\r\n      // limite = new Date(maintenant.setMonth(maintenant.getMonth() - 3));\r\n      limite = new Date(maintenant.setMonth(maintenant.getMonth() - 3));\r\n      break;\r\n    case '6mois':\r\n      // limite = new Date(maintenant.setMonth(maintenant.getMonth() - 6));\r\n      limite = new Date(maintenant.setMonth(maintenant.getMonth() - 6));\r\n      break;\r\n    default:\r\n      return data;\r\n  }\r\n\r\n  return data.filter(entry => new Date(entry.userLocalDate) >= limite);\r\n};\r\n\r\n\r\n  // useEffect(() => {\r\n  //   const fetchUserFeelingsAndHistory = async () => {\r\n  //     try {\r\n  //       const API_URL =\r\n  //         window.location.hostname === \"localhost\"\r\n  //           ? \"http://localhost:4000\"\r\n  //           : \"https://myday-back.onrender.com\";\r\n\r\n  //       const feelingsResponse = await fetch(`${API_URL}/user-feelings`, {\r\n  //         method: \"GET\",\r\n  //         headers: { \"Content-Type\": \"application/json\" },\r\n  //         credentials: 'include'\r\n  //       });\r\n\r\n  //       const feelingsData = await feelingsResponse.json();\r\n  //       if (feelingsData && feelingsData.feelings) {\r\n  //         setFeelings(feelingsData.feelings);\r\n  //         setPhraseGratitude(feelingsData.phraseGratitude || []);\r\n  //         setReglesDates(feelingsData.regles || []);\r\n  //       }\r\n\r\n  //       const historyResponse = await axios.get(`${API_URL}/user-history`, {\r\n  //         withCredentials: true,\r\n  //       });\r\n\r\n  //       const historyData = historyResponse.data;\r\n  //       historyData.sort((a, b) => new Date(a.userLocalDate) - new Date(b.userLocalDate));\r\n\r\n  //       const labels = historyData.map(entry => {\r\n  //         const date = new Date(entry.userLocalDate);\r\n  //         return date.toLocaleDateString('fr-FR', {\r\n  //           day: '2-digit',\r\n  //           month: 'short',\r\n  //         });\r\n  //       });\r\n\r\n  //       const gratitudeHistory = historyData\r\n  //         .map(entry => entry.phraseGratitude)\r\n  //         .filter(phrase => phrase && phrase.trim() !== \"\");\r\n\r\n  //       const gratitudeDates = historyData\r\n  //         .map(entry => new Date(entry.userLocalDate).toLocaleDateString())\r\n  //         .filter((_, index) => gratitudeHistory[index]);\r\n\r\n  //       setDatesGratitude(gratitudeDates);\r\n  //       setHistoriqueGratitude(gratitudeHistory);\r\n\r\n  //       const data = {\r\n  //         labels,\r\n  //         datasets: [\r\n  //           {\r\n  //             label: feelings[0],\r\n  //             data: historyData.map(entry => entry.feeling1),\r\n  //             borderColor: 'rgba(75, 192, 192, 1)',\r\n  //             borderWidth: 2,\r\n  //             pointRadius: 1,\r\n  //             pointHoverRadius: 4,\r\n  //             fill: false,\r\n  //             hidden: !showFeeling1\r\n  //           },\r\n  //           {\r\n  //             label: feelings[1],\r\n  //             data: historyData.map(entry => entry.feeling2),\r\n  //             borderColor: 'rgba(153, 102, 255, 1)',\r\n  //             borderWidth: 2,\r\n  //             pointRadius: 1,\r\n  //             pointHoverRadius: 4,\r\n  //             fill: false,\r\n  //             hidden: !showFeeling2\r\n  //           },\r\n  //           {\r\n  //             label: feelings[2],\r\n  //             data: historyData.map(entry => entry.feeling3),\r\n  //             borderColor: 'rgba(255, 99, 132, 1)',\r\n  //             borderWidth: 2,\r\n  //             pointRadius: 1,\r\n  //             pointHoverRadius: 4,\r\n  //             fill: false,\r\n  //             hidden: !showFeeling3\r\n  //           },\r\n  //           {\r\n  //             label: feelings[3],\r\n  //             data: historyData.map(entry => entry.feeling4),\r\n  //             borderColor: 'rgba(255, 206, 86, 1)',\r\n  //             borderWidth: 2,\r\n  //             pointRadius: 1,\r\n  //             pointHoverRadius: 4,\r\n  //             fill: false,\r\n  //             hidden: !showFeeling4\r\n  //           },\r\n  //           {\r\n  //             label: 'Règles',\r\n  //             data: reglesDates.map((regle, index) => {\r\n  //               return regle === true ? 0 : null;\r\n  //             }),\r\n  //             borderColor: 'rgba(0, 0, 0, 1)',\r\n  //             backgroundColor: 'rgba(0, 0, 0, 1)',\r\n  //             borderWidth: 4,\r\n  //             pointRadius: 4,\r\n  //             pointHoverRadius: 4,\r\n  //             fill: true,\r\n  //             hidden: !showRegles\r\n  //           }\r\n  //         ],\r\n  //       };\r\n\r\n  //       setChartData(data);\r\n  //     } catch (error) {\r\n  //       console.error(\"Erreur lors de la récupération des données :\", error);\r\n  //     }\r\n  //   };\r\n\r\n  //   fetchUserFeelingsAndHistory();\r\n  // }, [feelings, reglesDates, showFeeling1, showFeeling2, showFeeling3, showFeeling4, showRegles]);\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    const fetchUserFeelingsAndHistory = async () => {\r\n      try {\r\n        const API_URL =\r\n          window.location.hostname === \"localhost\"\r\n            ? \"http://localhost:4000\"\r\n            : \"https://myday-back.onrender.com\";\r\n  \r\n        const feelingsResponse = await fetch(`${API_URL}/user-feelings`, {\r\n          method: \"GET\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          credentials: 'include'\r\n        });\r\n  \r\n        const feelingsData = await feelingsResponse.json();\r\n        console.log(\"theme dans historique !! : \",feelingsData.theme)\r\n        // document.body.className = feelingsData.theme;\r\n        setTheme(feelingsData.theme)\r\n        // setOptions(feelingsData.theme)\r\n        document.body.className = feelingsData.theme;\r\n        // cons.log(\"feelingsData  :\",feelingsData )\r\n        if (feelingsData && feelingsData.feelings) {\r\n          // Ne relance pas setFeelings inutilement si les valeurs sont déjà identiques\r\n          setFeelings(prev => JSON.stringify(prev) !== JSON.stringify(feelingsData.feelings) ? feelingsData.feelings : prev);\r\n          setPhraseGratitude(feelingsData.phraseGratitude || []);\r\n          setReglesDates(feelingsData.regles || []);\r\n        }\r\n  \r\n        const historyResponse = await axios.get(`${API_URL}/user-history`, {\r\n          withCredentials: true,\r\n        });\r\n        // conseol.log(\"historyResponse :\",historyResponse)\r\n        const historyData = historyResponse.data;\r\n        // historyData.sort((a, b) => new Date(a.userLocalDate) - new Date(b.userLocalDate));\r\n        historyData.sort((a, b) => new Date(a.userLocalDate) - new Date(b.userLocalDate));\r\n        const filteredHistory = filtrerDonneesParTemps(historyData, timeRange);\r\n        const labels = filteredHistory.map(entry => {\r\n          const date = new Date(entry.userLocalDate);\r\n          return date.toLocaleDateString('fr-FR', {\r\n            day: '2-digit',\r\n            month: 'short',\r\n          });\r\n        });\r\n  \r\n        const gratitudeHistory = historyData\r\n          .map(entry => entry.phraseGratitude)\r\n          .filter(phrase => phrase && phrase.trim() !== \"\");\r\n  \r\n        const gratitudeDates = historyData\r\n          .map(entry => new Date(entry.userLocalDate).toLocaleDateString())\r\n          .filter((_, index) => gratitudeHistory[index]);\r\n  \r\n        setDatesGratitude(gratitudeDates);\r\n        setHistoriqueGratitude(gratitudeHistory);\r\n        let data={}\r\n        if(feelingsData.theme===\"dark\"){\r\n        data = {\r\n          labels,\r\n          datasets: [\r\n            {\r\n              label: feelingsData.feelings[0],\r\n              data: historyData.map(entry => entry.feeling1),\r\n              borderColor: 'rgba(75, 192, 192, 1)',  // Turquoise\r\n              // borderColor: 'rgb(255, 255, 255)', \r\n              borderWidth: 2,\r\n              pointRadius: 4,  // Plus grand pour mieux se voir\r\n              pointHoverRadius: 8,\r\n              pointStyle: 'circle',  // Type de point : Cercle\r\n              fill: false,\r\n              hidden: !showFeeling1\r\n            },\r\n            {\r\n              label: feelingsData.feelings[1],\r\n              data: historyData.map(entry => entry.feeling2),\r\n              borderColor: 'rgba(153, 102, 255, 1)',  // Violet\r\n              // borderColor: 'rgb(255, 255, 255)',\r\n              borderWidth: 2,\r\n              pointRadius: 4,\r\n              pointHoverRadius: 8,\r\n              pointStyle: 'triangle',  // Type de point : Triangle\r\n              fill: false,\r\n              hidden: !showFeeling2\r\n            },\r\n            {\r\n              label: feelingsData.feelings[2],\r\n              data: historyData.map(entry => entry.feeling3),\r\n              borderColor: 'rgba(255, 99, 132, 1)',  // Rose\r\n              // borderColor: 'rgb(255, 255, 255)',\r\n              borderWidth: 2,\r\n              pointRadius: 4,\r\n              pointHoverRadius: 8,\r\n              pointStyle: 'rect',  // Type de point : Carré\r\n              fill: false,\r\n              hidden: !showFeeling3\r\n            },\r\n            {\r\n              label: feelingsData.feelings[3],\r\n              data: historyData.map(entry => entry.feeling4),\r\n              borderColor: 'rgba(255, 206, 86, 1)',  // Jaune\r\n              // borderColor: 'rgb(255, 255, 255)',\r\n              borderWidth: 2,\r\n              pointRadius: 4,\r\n              pointHoverRadius: 8,\r\n              pointStyle: 'star',  // Type de point : Étoile\r\n              fill: false,\r\n              hidden: !showFeeling4\r\n            },\r\n            {\r\n              label: 'Règles',\r\n              data: feelingsData.regles?.map((regle) => (regle === true ? 0 : null)) || [],\r\n              // borderColor: 'rgb(255, 255, 255)',\r\n              backgroundColor: 'rgb(240, 78, 210)',\r\n              borderColor: 'rgb(223, 215, 215)',\r\n              borderWidth: 2,\r\n              pointRadius: 4,\r\n              pointHoverRadius: 4,\r\n              fill: true,\r\n              hidden: !showRegles\r\n            }\r\n          ],\r\n        };\r\n        }else\r\n        {\r\n        data = {\r\n          labels,\r\n          datasets: [\r\n            {\r\n              label: feelingsData.feelings[0],\r\n              data: historyData.map(entry => entry.feeling1),\r\n              borderColor: 'rgba(75, 192, 192, 1)',  // Turquoise\r\n              borderWidth: 2,\r\n              pointRadius: 4,  // Plus grand pour mieux se voir\r\n              pointHoverRadius: 8,\r\n              pointStyle: 'circle',  // Type de point : Cercle\r\n              fill: false,\r\n              hidden: !showFeeling1\r\n            },\r\n            {\r\n              label: feelingsData.feelings[1],\r\n              data: historyData.map(entry => entry.feeling2),\r\n              borderColor: 'rgba(153, 102, 255, 1)',  // Violet\r\n              borderWidth: 2,\r\n              pointRadius: 4,\r\n              pointHoverRadius: 8,\r\n              pointStyle: 'triangle',  // Type de point : Triangle\r\n              fill: false,\r\n              hidden: !showFeeling2\r\n            },\r\n            {\r\n              label: feelingsData.feelings[2],\r\n              data: historyData.map(entry => entry.feeling3),\r\n              borderColor: 'rgba(255, 99, 132, 1)',  // Rose\r\n              borderWidth: 2,\r\n              pointRadius: 4,\r\n              pointHoverRadius: 8,\r\n              pointStyle: 'rect',  // Type de point : Carré\r\n              fill: false,\r\n              hidden: !showFeeling3\r\n            },\r\n            {\r\n              label: feelingsData.feelings[3],\r\n              data: historyData.map(entry => entry.feeling4),\r\n              borderColor: 'rgba(255, 206, 86, 1)',  // Jaune\r\n              borderWidth: 2,\r\n              pointRadius: 4,\r\n              pointHoverRadius: 8,\r\n              pointStyle: 'star',  // Type de point : Étoile\r\n              fill: false,\r\n              hidden: !showFeeling4\r\n            },\r\n            {\r\n              label: 'Règles',\r\n              data: feelingsData.regles?.map((regle) => (regle === true ? 0 : null)) || [],\r\n              borderColor: 'rgb(0, 0, 0)',\r\n              backgroundColor: 'rgb(0, 0, 0)',\r\n              borderWidth: 2,\r\n              pointRadius: 4,\r\n              pointHoverRadius: 4,\r\n              fill: true,\r\n              hidden: !showRegles\r\n            }\r\n          ],\r\n        };\r\n      }\r\n      // let options={}\r\n      // if(options===\"dark\"){ \r\n      //   options = {\r\n      //     responsive: true,\r\n      //     maintainAspectRatio: false,\r\n      //     scales: {\r\n      //       x: {\r\n      //         ticks: {\r\n      //           font: {\r\n      //             weight: 'bold',\r\n      //           },\r\n      //           color: 'white', // Couleur du texte sur l'axe X\r\n      //         },\r\n      //         grid: {\r\n      //           color: 'rgb(253, 253, 253)', // Optionnel : couleur des lignes de la grille\r\n      //         },\r\n      //       },\r\n      //       y: {\r\n      //         ticks: {\r\n      //           font: {\r\n      //             weight: 'bold',\r\n      //           },\r\n      //           color: 'white', // Couleur du texte sur l'axe Y\r\n      //         },\r\n      //         grid: {\r\n      //           color: 'rgb(253, 253, 253)', // Optionnel\r\n      //         },\r\n      //       },\r\n      //     },\r\n      //     plugins: {\r\n      //       legend: {\r\n      //         display: true,\r\n      //         position: 'top',\r\n      //         labels: {\r\n      //           font: {\r\n      //             size: 14,\r\n      //             family: 'Arial',\r\n      //             weight: 'bold',\r\n      //           },\r\n      //           color: 'white', // Couleur du texte de la légende\r\n      //           boxWidth: 15,\r\n      //           boxHeight: 5,\r\n      //           padding: 20,\r\n      //           usePointStyle: true,\r\n      //         },\r\n      //       },\r\n      //       zoom: {\r\n      //         pan: {\r\n      //           enabled: true,\r\n      //           mode: 'x',\r\n      //         },\r\n      //         zoom: {\r\n      //           wheel: {\r\n      //             enabled: true,\r\n      //           },\r\n      //           pinch: {\r\n      //             enabled: true,\r\n      //           },\r\n      //           mode: 'x',\r\n      //         },\r\n      //       },\r\n      //     },\r\n      //   };        \r\n      // } else {\r\n      //   options = {\r\n      //     responsive: true,\r\n      //     maintainAspectRatio: false,\r\n      //     scales: {\r\n      //       x: {\r\n      //         ticks: {\r\n      //           font: {\r\n      //             weight: 'bold',\r\n      //           },\r\n      //         },\r\n      //       },\r\n      //     },\r\n      //     plugins: {\r\n      //       legend: {\r\n      //         display: true,\r\n      //         position: 'top',  // Position de la légende\r\n      //         labels: {\r\n      //           font: {\r\n      //             size: 14,\r\n      //             family: 'Arial',\r\n      //             weight: 'bold',\r\n      //           },\r\n      //           boxWidth: 15,\r\n      //           boxHeight: 5,\r\n      //           marginTop: 10,\r\n      //           marginBottom: 10,\r\n      //           padding: 20,\r\n      //           color: '#333',\r\n      //           usePointStyle: true,\r\n      //         },\r\n      //         // Ajout de la bordure autour de la légende entière\r\n      //         onBeforeInit: (chart) => {\r\n      //           const legend = chart.legend;\r\n      //           legend.boxWidth = 30;  // Largeur de la légende (ajustez selon votre besoin)\r\n      //           legend.labels.padding = 10;  // Espacement entre les labels\r\n      //           legend.borderColor = '#333';  // Couleur de la bordure\r\n      //           legend.borderWidth = 2;  // Largeur de la bordure\r\n      //           legend.borderRadius = 5;  // Rayon des coins\r\n      //           legend.backgroundColor = 'rgba(255, 255, 255, 0.7)';  // Fond de la légende (transparent ou couleur de fond)\r\n      //         },\r\n      //       },\r\n      //       zoom: {\r\n      //         pan: {\r\n      //           enabled: true,\r\n      //           mode: 'x',\r\n      //         },\r\n      //         zoom: {\r\n      //           wheel: {\r\n      //             enabled: true,\r\n      //           },\r\n      //           pinch: {\r\n      //             enabled: true,\r\n      //           },\r\n      //           mode: 'x',\r\n      //         },\r\n      //       },\r\n      //     },\r\n      //   };\r\n      // }\r\n\r\n  \r\n        setChartData(data);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des données :\", error);\r\n      }\r\n    };\r\n  \r\n    fetchUserFeelingsAndHistory();\r\n  }, [showFeeling1, showFeeling2, showFeeling3, showFeeling4, showRegles,timeRange]);\r\n  \r\n  // const options = {\r\n  //   responsive: true,\r\n  //   maintainAspectRatio: false,\r\n  //   scales: {\r\n  //     x: {\r\n  //       ticks: {\r\n  //         font: {\r\n  //           weight: 'bold',\r\n  //         },\r\n  //       },\r\n  //     },\r\n  //   },\r\n  //   plugins: {\r\n  //     legend: {\r\n  //       display: true,\r\n  //       position: 'top',  // Position de la légende\r\n  //       labels: {\r\n  //         font: {\r\n  //           size: 14,\r\n  //           family: 'Arial',\r\n  //           weight: 'bold',\r\n  //         },\r\n  //         boxWidth: 15,\r\n  //         boxHeight: 5,\r\n  //         marginTop: 10,\r\n  //         marginBottom: 10,\r\n  //         padding: 20,\r\n  //         color: '#333',\r\n  //         usePointStyle: true,\r\n  //       },\r\n  //       // Ajout de la bordure autour de la légende entière\r\n  //       onBeforeInit: (chart) => {\r\n  //         const legend = chart.legend;\r\n  //         legend.boxWidth = 30;  // Largeur de la légende (ajustez selon votre besoin)\r\n  //         legend.labels.padding = 10;  // Espacement entre les labels\r\n  //         legend.borderColor = '#333';  // Couleur de la bordure\r\n  //         legend.borderWidth = 2;  // Largeur de la bordure\r\n  //         legend.borderRadius = 5;  // Rayon des coins\r\n  //         legend.backgroundColor = 'rgba(255, 255, 255, 0.7)';  // Fond de la légende (transparent ou couleur de fond)\r\n  //       },\r\n  //     },\r\n  //     zoom: {\r\n  //       pan: {\r\n  //         enabled: true,\r\n  //         mode: 'x',\r\n  //       },\r\n  //       zoom: {\r\n  //         wheel: {\r\n  //           enabled: true,\r\n  //         },\r\n  //         pinch: {\r\n  //           enabled: true,\r\n  //         },\r\n  //         mode: 'x',\r\n  //       },\r\n  //     },\r\n  //   },\r\n  // };\r\n  let options={}\r\n  if(theme===\"dark\"){ \r\n    options = {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      scales: {\r\n        x: {\r\n          ticks: {\r\n            font: {\r\n              weight: 'bold',\r\n            },\r\n            color: 'white', // Couleur du texte sur l'axe X\r\n          },\r\n          grid: {\r\n            color: 'rgb(253, 253, 253)', // Optionnel : couleur des lignes de la grille\r\n            lineWidth: 0.5,\r\n          },\r\n        },\r\n        y: {\r\n          ticks: {\r\n            font: {\r\n              weight: 'bold',\r\n            },\r\n            color: 'white', // Couleur du texte sur l'axe Y\r\n          },\r\n          grid: {\r\n            color: 'rgb(253, 253, 253)', // Optionnel\r\n            lineWidth: 0.5,\r\n          },\r\n        },\r\n      },\r\n      plugins: {\r\n        legend: {\r\n          display: true,\r\n          position: 'top',\r\n          labels: {\r\n            font: {\r\n              size: 14,\r\n              family: 'Arial',\r\n              weight: 'bold',\r\n            },\r\n            color: 'white', // Couleur du texte de la légende\r\n            boxWidth: 15,\r\n            boxHeight: 5,\r\n            padding: 20,\r\n            usePointStyle: true,\r\n          },\r\n        },\r\n        zoom: {\r\n          pan: {\r\n            enabled: true,\r\n            mode: 'x',\r\n          },\r\n          zoom: {\r\n            wheel: {\r\n              enabled: true,\r\n            },\r\n            pinch: {\r\n              enabled: true,\r\n            },\r\n            mode: 'x',\r\n          },\r\n        },\r\n      },\r\n    };        \r\n  } else {\r\n  options = {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      scales: {\r\n        x: {\r\n          ticks: {\r\n            font: {\r\n              weight: 'bold',\r\n            },\r\n          },\r\n        },\r\n      },\r\n      plugins: {\r\n        legend: {\r\n          display: true,\r\n          position: 'top',  // Position de la légende\r\n          labels: {\r\n            font: {\r\n              size: 14,\r\n              family: 'Arial',\r\n              weight: 'bold',\r\n            },\r\n            boxWidth: 15,\r\n            boxHeight: 5,\r\n            marginTop: 10,\r\n            marginBottom: 10,\r\n            padding: 20,\r\n            color: '#333',\r\n            usePointStyle: true,\r\n          },\r\n          // Ajout de la bordure autour de la légende entière\r\n          onBeforeInit: (chart) => {\r\n            const legend = chart.legend;\r\n            legend.boxWidth = 30;  // Largeur de la légende (ajustez selon votre besoin)\r\n            legend.labels.padding = 10;  // Espacement entre les labels\r\n            legend.borderColor = '#333';  // Couleur de la bordure\r\n            legend.borderWidth = 2;  // Largeur de la bordure\r\n            legend.borderRadius = 5;  // Rayon des coins\r\n            legend.backgroundColor = 'rgba(255, 255, 255, 0.7)';  // Fond de la légende (transparent ou couleur de fond)\r\n          },\r\n        },\r\n        zoom: {\r\n          pan: {\r\n            enabled: true,\r\n            mode: 'x',\r\n          },\r\n          zoom: {\r\n            wheel: {\r\n              enabled: true,\r\n            },\r\n            pinch: {\r\n              enabled: true,\r\n            },\r\n            mode: 'x',\r\n          },\r\n        },\r\n      },\r\n    };\r\n  }\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <h6>Historique des Émotions</h6>\r\n        <div className=\"time-filter\">\r\n        <button onClick={() => setTimeRange('24heures')}>1 jour</button>\r\n          <button onClick={() => setTimeRange('1semaine')}>1 semaine</button>\r\n          {/* <button onClick={() => setTimeRange('2semaine')}>2 semaines</button> */}\r\n          <button onClick={() => setTimeRange('1mois')}>1 mois</button>\r\n          <button onClick={() => setTimeRange('3mois')}>3 mois</button>\r\n          <button onClick={() => setTimeRange('6mois')}>6 mois</button>\r\n          <button onClick={() => setTimeRange('tout')}>Tout</button>\r\n        </div>\r\n        <div className=\"chart-container\">\r\n          {chartData.labels && <Line data={chartData} options={options} />}\r\n        </div>\r\n        \r\n\r\n        {/* <div className=\"checkbox-container\">\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showFeeling1}\r\n              onChange={() => setShowFeeling1(!showFeeling1)}\r\n            />\r\n            {feelings[0]}\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showFeeling2}\r\n              onChange={() => setShowFeeling2(!showFeeling2)}\r\n            />\r\n            {feelings[1]}\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showFeeling3}\r\n              onChange={() => setShowFeeling3(!showFeeling3)}\r\n            />\r\n            {feelings[2]}\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showFeeling4}\r\n              onChange={() => setShowFeeling4(!showFeeling4)}\r\n            />\r\n            {feelings[3]}\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showRegles}\r\n              onChange={() => setShowRegles(!showRegles)}\r\n            />\r\n            Menstruation\r\n          </label>\r\n        </div> */}\r\n        <div className=\"checkbox-container\">\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showFeeling1}\r\n              onChange={() => setShowFeeling1(!showFeeling1)}\r\n            />\r\n            {feelings[0]}\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showFeeling2}\r\n              onChange={() => setShowFeeling2(!showFeeling2)}\r\n            />\r\n            {feelings[1]}\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showFeeling3}\r\n              onChange={() => setShowFeeling3(!showFeeling3)}\r\n            />\r\n            {feelings[2]}\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showFeeling4}\r\n              onChange={() => setShowFeeling4(!showFeeling4)}\r\n            />\r\n            {feelings[3]}\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showRegles}\r\n              onChange={() => setShowRegles(!showRegles)}\r\n            />\r\n            Règles\r\n          </label>\r\n        </div>\r\n\r\n\r\n        <div className=\"historique-gratitude\">\r\n          <div className='h7'>Historique des mantras</div>\r\n          <div className='fenetre-gratitude'>\r\n            {historiqueGratitude.length > 0 ? (\r\n              historiqueGratitude.map((phrase, index) => (\r\n                <div key={index}>\r\n                  <p>{phrase} : (<em>{gratitudeDates[index]})</em></p>\r\n                  <hr className=\"hr-phraseGratitude\" />\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <li>Aucune phrase de gratitude disponible</li>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        <Link to=\"/\">\r\n          <button type=\"button\" className=\"submit-button-history\">\r\n            Emotions\r\n          </button>\r\n        </Link>\r\n        {/* <div className=\"button-container\">\r\n          <LogoutButton />\r\n        </div> */}\r\n        <p className =\"droits\">© 2025 myDay. Tous droits réservés.\r\n        Cette application, ainsi que l’ensemble de son contenu, est protégée par les lois en vigueur relatives à la propriété intellectuelle. Les données qu’elle contient sont chiffrées afin d’en garantir la sécurité. </p>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Historique;\r\n\r\n// { \"pseudo\": { \"$eq\": \"qs\"} }\r\n"],"mappings":"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AK,CAACC,aAAa,CAAC,EAAIT,MAAM,CAAC,CACtE,CAAC,CAGC;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEApD,SAAS,CAAC,IAAM,CACd8D,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAE,CAAC,CAAC,CACrB,KAAM,CAAAC,2BAA2B,CAAG,KAAAA,CAAA,GAAY,CAC9C,GAAI,CACF,KAAM,CAAAC,OAAO,CACXH,MAAM,CAACI,QAAQ,CAACC,QAAQ,GAAK,WAAW,CACpC,uBAAuB,CACvB,iCAAiC,CAEvC,KAAM,CAAAC,gBAAgB,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGJ,OAAO,gBAAgB,CAAE,CAC/DK,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,WAAW,CAAE,SACf,CAAC,CAAC,CAEF,KAAM,CAAAC,YAAY,CAAG,KAAM,CAAAL,gBAAgB,CAACM,IAAI,CAAC,CAAC,CAClDC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAACH,YAAY,CAACxC,KAAK,CAAC,CAC7D;AACAC,QAAQ,CAACuC,YAAY,CAACxC,KAAK,CAAC,CAC5B;AACA4C,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAGN,YAAY,CAACxC,KAAK,CAC5C;AACA,GAAIw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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}