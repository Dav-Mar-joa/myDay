{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\850_G5\\\\Documents\\\\Formation_Dot_Net\\\\myday\\\\front-end\\\\src\\\\Historique.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport LogoutButton from './LogoutButton'; // Importer le composant LogoutButton\nimport { Link } from 'react-router-dom';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(zoomPlugin);\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst Historique = () => {\n  _s();\n  const [chartData, setChartData] = useState({});\n  const [feelings, setFeelings] = useState([\"\", \"\", \"\", \"\"]);\n  const [phraseGratitude, setPhraseGratitude] = useState(\"\");\n  const [historiqueGratitude, setHistoriqueGratitude] = useState([]);\n  const [gratitudeDates, setDatesGratitude] = useState([]);\n  const [reglesDates, setReglesDates] = useState([]);\n  const [theme, setTheme] = useState(\"\");\n  // const[options,setOptions]=useState({})\n\n  const [showFeeling1, setShowFeeling1] = useState(true);\n  const [showFeeling2, setShowFeeling2] = useState(true);\n  const [showFeeling3, setShowFeeling3] = useState(true);\n  const [showFeeling4, setShowFeeling4] = useState(true);\n  const [showRegles, setShowRegles] = useState(true);\n  const [timeRange, setTimeRange] = useState('3mois');\n  const filtrerDonneesParTemps = (data, range) => {\n    const maintenant = new Date();\n    let limite;\n    switch (range) {\n      case '24heures':\n        limite = new Date(maintenant.setHours(maintenant.getHours() - 24));\n        break;\n      case '1semaine':\n        limite = new Date(maintenant.setDate(maintenant.getDate() - 7));\n        break;\n      // case '2semaine':\n      // limite = new Date(maintenant.setDate(maintenant.getDate() - 14));\n      // break;\n      case '1mois':\n        // limite = new Date(maintenant.setMonth(maintenant.getMonth() - 1));\n        limite = new Date(maintenant.setMonth(maintenant.getMonth() - 1));\n        break;\n      case '3mois':\n        // limite = new Date(maintenant.setMonth(maintenant.getMonth() - 3));\n        limite = new Date(maintenant.setMonth(maintenant.getMonth() - 3));\n        break;\n      case '6mois':\n        // limite = new Date(maintenant.setMonth(maintenant.getMonth() - 6));\n        limite = new Date(maintenant.setMonth(maintenant.getMonth() - 6));\n        break;\n      default:\n        return data;\n    }\n    return data.filter(entry => new Date(entry.userLocalDate) >= limite);\n  };\n\n  // useEffect(() => {\n  //   const fetchUserFeelingsAndHistory = async () => {\n  //     try {\n  //       const API_URL =\n  //         window.location.hostname === \"localhost\"\n  //           ? \"http://localhost:4000\"\n  //           : \"https://myday-back.onrender.com\";\n\n  //       const feelingsResponse = await fetch(`${API_URL}/user-feelings`, {\n  //         method: \"GET\",\n  //         headers: { \"Content-Type\": \"application/json\" },\n  //         credentials: 'include'\n  //       });\n\n  //       const feelingsData = await feelingsResponse.json();\n  //       if (feelingsData && feelingsData.feelings) {\n  //         setFeelings(feelingsData.feelings);\n  //         setPhraseGratitude(feelingsData.phraseGratitude || []);\n  //         setReglesDates(feelingsData.regles || []);\n  //       }\n\n  //       const historyResponse = await axios.get(`${API_URL}/user-history`, {\n  //         withCredentials: true,\n  //       });\n\n  //       const historyData = historyResponse.data;\n  //       historyData.sort((a, b) => new Date(a.userLocalDate) - new Date(b.userLocalDate));\n\n  //       const labels = historyData.map(entry => {\n  //         const date = new Date(entry.userLocalDate);\n  //         return date.toLocaleDateString('fr-FR', {\n  //           day: '2-digit',\n  //           month: 'short',\n  //         });\n  //       });\n\n  //       const gratitudeHistory = historyData\n  //         .map(entry => entry.phraseGratitude)\n  //         .filter(phrase => phrase && phrase.trim() !== \"\");\n\n  //       const gratitudeDates = historyData\n  //         .map(entry => new Date(entry.userLocalDate).toLocaleDateString())\n  //         .filter((_, index) => gratitudeHistory[index]);\n\n  //       setDatesGratitude(gratitudeDates);\n  //       setHistoriqueGratitude(gratitudeHistory);\n\n  //       const data = {\n  //         labels,\n  //         datasets: [\n  //           {\n  //             label: feelings[0],\n  //             data: historyData.map(entry => entry.feeling1),\n  //             borderColor: 'rgba(75, 192, 192, 1)',\n  //             borderWidth: 2,\n  //             pointRadius: 1,\n  //             pointHoverRadius: 4,\n  //             fill: false,\n  //             hidden: !showFeeling1\n  //           },\n  //           {\n  //             label: feelings[1],\n  //             data: historyData.map(entry => entry.feeling2),\n  //             borderColor: 'rgba(153, 102, 255, 1)',\n  //             borderWidth: 2,\n  //             pointRadius: 1,\n  //             pointHoverRadius: 4,\n  //             fill: false,\n  //             hidden: !showFeeling2\n  //           },\n  //           {\n  //             label: feelings[2],\n  //             data: historyData.map(entry => entry.feeling3),\n  //             borderColor: 'rgba(255, 99, 132, 1)',\n  //             borderWidth: 2,\n  //             pointRadius: 1,\n  //             pointHoverRadius: 4,\n  //             fill: false,\n  //             hidden: !showFeeling3\n  //           },\n  //           {\n  //             label: feelings[3],\n  //             data: historyData.map(entry => entry.feeling4),\n  //             borderColor: 'rgba(255, 206, 86, 1)',\n  //             borderWidth: 2,\n  //             pointRadius: 1,\n  //             pointHoverRadius: 4,\n  //             fill: false,\n  //             hidden: !showFeeling4\n  //           },\n  //           {\n  //             label: 'Règles',\n  //             data: reglesDates.map((regle, index) => {\n  //               return regle === true ? 0 : null;\n  //             }),\n  //             borderColor: 'rgba(0, 0, 0, 1)',\n  //             backgroundColor: 'rgba(0, 0, 0, 1)',\n  //             borderWidth: 4,\n  //             pointRadius: 4,\n  //             pointHoverRadius: 4,\n  //             fill: true,\n  //             hidden: !showRegles\n  //           }\n  //         ],\n  //       };\n\n  //       setChartData(data);\n  //     } catch (error) {\n  //       console.error(\"Erreur lors de la récupération des données :\", error);\n  //     }\n  //   };\n\n  //   fetchUserFeelingsAndHistory();\n  // }, [feelings, reglesDates, showFeeling1, showFeeling2, showFeeling3, showFeeling4, showRegles]);\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    const fetchUserFeelingsAndHistory = async () => {\n      try {\n        const API_URL = window.location.hostname === \"localhost\" ? \"http://localhost:4000\" : \"https://myday-back.onrender.com\";\n        const feelingsResponse = await fetch(`${API_URL}/user-feelings`, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          credentials: 'include'\n        });\n        const feelingsData = await feelingsResponse.json();\n        console.log(\"theme dans historique !! : \", feelingsData.theme);\n        // document.body.className = feelingsData.theme;\n        setTheme(feelingsData.theme);\n        // setOptions(feelingsData.theme)\n        document.body.className = feelingsData.theme;\n        // cons.log(\"feelingsData  :\",feelingsData )\n        if (feelingsData && feelingsData.feelings) {\n          // Ne relance pas setFeelings inutilement si les valeurs sont déjà identiques\n          setFeelings(prev => JSON.stringify(prev) !== JSON.stringify(feelingsData.feelings) ? feelingsData.feelings : prev);\n          c;\n          setPhraseGratitude(feelingsData.phraseGratitude || []);\n          setReglesDates(feelingsData.regles || []);\n        }\n        const historyResponse = await axios.get(`${API_URL}/user-history`, {\n          withCredentials: true\n        });\n        // conseol.log(\"historyResponse :\",historyResponse)\n        const historyData = historyResponse.data;\n        // historyData.sort((a, b) => new Date(a.userLocalDate) - new Date(b.userLocalDate));\n        historyData.sort((a, b) => new Date(a.userLocalDate) - new Date(b.userLocalDate));\n        const filteredHistory = filtrerDonneesParTemps(historyData, timeRange);\n        const labels = filteredHistory.map(entry => {\n          const date = new Date(entry.userLocalDate);\n          return date.toLocaleDateString('fr-FR', {\n            day: '2-digit',\n            month: 'short'\n          });\n        });\n        const gratitudeHistory = historyData.map(entry => entry.phraseGratitude).filter(phrase => phrase && phrase.trim() !== \"\");\n        const gratitudeDates = historyData.map(entry => new Date(entry.userLocalDate).toLocaleDateString()).filter((_, index) => gratitudeHistory[index]);\n        setDatesGratitude(gratitudeDates);\n        setHistoriqueGratitude(gratitudeHistory);\n        let data = {};\n        if (feelingsData.theme === \"dark\") {\n          var _feelingsData$regles;\n          data = {\n            labels,\n            datasets: [{\n              label: feelingsData.feelings[0],\n              data: historyData.map(entry => entry.feeling1),\n              borderColor: 'rgba(75, 192, 192, 1)',\n              // Turquoise\n              // borderColor: 'rgb(255, 255, 255)', \n              borderWidth: 2,\n              pointRadius: 4,\n              // Plus grand pour mieux se voir\n              pointHoverRadius: 8,\n              pointStyle: 'circle',\n              // Type de point : Cercle\n              fill: false,\n              hidden: !showFeeling1\n            }, {\n              label: feelingsData.feelings[1],\n              data: historyData.map(entry => entry.feeling2),\n              borderColor: 'rgba(153, 102, 255, 1)',\n              // Violet\n              // borderColor: 'rgb(255, 255, 255)',\n              borderWidth: 2,\n              pointRadius: 4,\n              pointHoverRadius: 8,\n              pointStyle: 'triangle',\n              // Type de point : Triangle\n              fill: false,\n              hidden: !showFeeling2\n            }, {\n              label: feelingsData.feelings[2],\n              data: historyData.map(entry => entry.feeling3),\n              borderColor: 'rgba(255, 99, 132, 1)',\n              // Rose\n              // borderColor: 'rgb(255, 255, 255)',\n              borderWidth: 2,\n              pointRadius: 4,\n              pointHoverRadius: 8,\n              pointStyle: 'rect',\n              // Type de point : Carré\n              fill: false,\n              hidden: !showFeeling3\n            }, {\n              label: feelingsData.feelings[3],\n              data: historyData.map(entry => entry.feeling4),\n              borderColor: 'rgba(255, 206, 86, 1)',\n              // Jaune\n              // borderColor: 'rgb(255, 255, 255)',\n              borderWidth: 2,\n              pointRadius: 4,\n              pointHoverRadius: 8,\n              pointStyle: 'star',\n              // Type de point : Étoile\n              fill: false,\n              hidden: !showFeeling4\n            }, {\n              label: 'Règles',\n              data: ((_feelingsData$regles = feelingsData.regles) === null || _feelingsData$regles === void 0 ? void 0 : _feelingsData$regles.map(regle => regle === true ? 0 : null)) || [],\n              // borderColor: 'rgb(255, 255, 255)',\n              backgroundColor: 'rgb(240, 78, 210)',\n              borderColor: 'rgb(223, 215, 215)',\n              borderWidth: 2,\n              pointRadius: 4,\n              pointHoverRadius: 4,\n              fill: true,\n              hidden: !showRegles\n            }]\n          };\n        } else {\n          var _feelingsData$regles2;\n          data = {\n            labels,\n            datasets: [{\n              label: feelingsData.feelings[0],\n              data: historyData.map(entry => entry.feeling1),\n              borderColor: 'rgba(75, 192, 192, 1)',\n              // Turquoise\n              borderWidth: 2,\n              pointRadius: 4,\n              // Plus grand pour mieux se voir\n              pointHoverRadius: 8,\n              pointStyle: 'circle',\n              // Type de point : Cercle\n              fill: false,\n              hidden: !showFeeling1\n            }, {\n              label: feelingsData.feelings[1],\n              data: historyData.map(entry => entry.feeling2),\n              borderColor: 'rgba(153, 102, 255, 1)',\n              // Violet\n              borderWidth: 2,\n              pointRadius: 4,\n              pointHoverRadius: 8,\n              pointStyle: 'triangle',\n              // Type de point : Triangle\n              fill: false,\n              hidden: !showFeeling2\n            }, {\n              label: feelingsData.feelings[2],\n              data: historyData.map(entry => entry.feeling3),\n              borderColor: 'rgba(255, 99, 132, 1)',\n              // Rose\n              borderWidth: 2,\n              pointRadius: 4,\n              pointHoverRadius: 8,\n              pointStyle: 'rect',\n              // Type de point : Carré\n              fill: false,\n              hidden: !showFeeling3\n            }, {\n              label: feelingsData.feelings[3],\n              data: historyData.map(entry => entry.feeling4),\n              borderColor: 'rgba(255, 206, 86, 1)',\n              // Jaune\n              borderWidth: 2,\n              pointRadius: 4,\n              pointHoverRadius: 8,\n              pointStyle: 'star',\n              // Type de point : Étoile\n              fill: false,\n              hidden: !showFeeling4\n            }, {\n              label: 'Règles',\n              data: ((_feelingsData$regles2 = feelingsData.regles) === null || _feelingsData$regles2 === void 0 ? void 0 : _feelingsData$regles2.map(regle => regle === true ? 0 : null)) || [],\n              borderColor: 'rgb(0, 0, 0)',\n              backgroundColor: 'rgb(0, 0, 0)',\n              borderWidth: 2,\n              pointRadius: 4,\n              pointHoverRadius: 4,\n              fill: true,\n              hidden: !showRegles\n            }]\n          };\n        }\n        // let options={}\n        // if(options===\"dark\"){ \n        //   options = {\n        //     responsive: true,\n        //     maintainAspectRatio: false,\n        //     scales: {\n        //       x: {\n        //         ticks: {\n        //           font: {\n        //             weight: 'bold',\n        //           },\n        //           color: 'white', // Couleur du texte sur l'axe X\n        //         },\n        //         grid: {\n        //           color: 'rgb(253, 253, 253)', // Optionnel : couleur des lignes de la grille\n        //         },\n        //       },\n        //       y: {\n        //         ticks: {\n        //           font: {\n        //             weight: 'bold',\n        //           },\n        //           color: 'white', // Couleur du texte sur l'axe Y\n        //         },\n        //         grid: {\n        //           color: 'rgb(253, 253, 253)', // Optionnel\n        //         },\n        //       },\n        //     },\n        //     plugins: {\n        //       legend: {\n        //         display: true,\n        //         position: 'top',\n        //         labels: {\n        //           font: {\n        //             size: 14,\n        //             family: 'Arial',\n        //             weight: 'bold',\n        //           },\n        //           color: 'white', // Couleur du texte de la légende\n        //           boxWidth: 15,\n        //           boxHeight: 5,\n        //           padding: 20,\n        //           usePointStyle: true,\n        //         },\n        //       },\n        //       zoom: {\n        //         pan: {\n        //           enabled: true,\n        //           mode: 'x',\n        //         },\n        //         zoom: {\n        //           wheel: {\n        //             enabled: true,\n        //           },\n        //           pinch: {\n        //             enabled: true,\n        //           },\n        //           mode: 'x',\n        //         },\n        //       },\n        //     },\n        //   };        \n        // } else {\n        //   options = {\n        //     responsive: true,\n        //     maintainAspectRatio: false,\n        //     scales: {\n        //       x: {\n        //         ticks: {\n        //           font: {\n        //             weight: 'bold',\n        //           },\n        //         },\n        //       },\n        //     },\n        //     plugins: {\n        //       legend: {\n        //         display: true,\n        //         position: 'top',  // Position de la légende\n        //         labels: {\n        //           font: {\n        //             size: 14,\n        //             family: 'Arial',\n        //             weight: 'bold',\n        //           },\n        //           boxWidth: 15,\n        //           boxHeight: 5,\n        //           marginTop: 10,\n        //           marginBottom: 10,\n        //           padding: 20,\n        //           color: '#333',\n        //           usePointStyle: true,\n        //         },\n        //         // Ajout de la bordure autour de la légende entière\n        //         onBeforeInit: (chart) => {\n        //           const legend = chart.legend;\n        //           legend.boxWidth = 30;  // Largeur de la légende (ajustez selon votre besoin)\n        //           legend.labels.padding = 10;  // Espacement entre les labels\n        //           legend.borderColor = '#333';  // Couleur de la bordure\n        //           legend.borderWidth = 2;  // Largeur de la bordure\n        //           legend.borderRadius = 5;  // Rayon des coins\n        //           legend.backgroundColor = 'rgba(255, 255, 255, 0.7)';  // Fond de la légende (transparent ou couleur de fond)\n        //         },\n        //       },\n        //       zoom: {\n        //         pan: {\n        //           enabled: true,\n        //           mode: 'x',\n        //         },\n        //         zoom: {\n        //           wheel: {\n        //             enabled: true,\n        //           },\n        //           pinch: {\n        //             enabled: true,\n        //           },\n        //           mode: 'x',\n        //         },\n        //       },\n        //     },\n        //   };\n        // }\n\n        setChartData(data);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des données :\", error);\n      }\n    };\n    fetchUserFeelingsAndHistory();\n  }, [showFeeling1, showFeeling2, showFeeling3, showFeeling4, showRegles, timeRange]);\n\n  // const options = {\n  //   responsive: true,\n  //   maintainAspectRatio: false,\n  //   scales: {\n  //     x: {\n  //       ticks: {\n  //         font: {\n  //           weight: 'bold',\n  //         },\n  //       },\n  //     },\n  //   },\n  //   plugins: {\n  //     legend: {\n  //       display: true,\n  //       position: 'top',  // Position de la légende\n  //       labels: {\n  //         font: {\n  //           size: 14,\n  //           family: 'Arial',\n  //           weight: 'bold',\n  //         },\n  //         boxWidth: 15,\n  //         boxHeight: 5,\n  //         marginTop: 10,\n  //         marginBottom: 10,\n  //         padding: 20,\n  //         color: '#333',\n  //         usePointStyle: true,\n  //       },\n  //       // Ajout de la bordure autour de la légende entière\n  //       onBeforeInit: (chart) => {\n  //         const legend = chart.legend;\n  //         legend.boxWidth = 30;  // Largeur de la légende (ajustez selon votre besoin)\n  //         legend.labels.padding = 10;  // Espacement entre les labels\n  //         legend.borderColor = '#333';  // Couleur de la bordure\n  //         legend.borderWidth = 2;  // Largeur de la bordure\n  //         legend.borderRadius = 5;  // Rayon des coins\n  //         legend.backgroundColor = 'rgba(255, 255, 255, 0.7)';  // Fond de la légende (transparent ou couleur de fond)\n  //       },\n  //     },\n  //     zoom: {\n  //       pan: {\n  //         enabled: true,\n  //         mode: 'x',\n  //       },\n  //       zoom: {\n  //         wheel: {\n  //           enabled: true,\n  //         },\n  //         pinch: {\n  //           enabled: true,\n  //         },\n  //         mode: 'x',\n  //       },\n  //     },\n  //   },\n  // };\n  let options = {};\n  if (theme === \"dark\") {\n    options = {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        x: {\n          ticks: {\n            font: {\n              weight: 'bold'\n            },\n            color: 'white' // Couleur du texte sur l'axe X\n          },\n          grid: {\n            color: 'rgb(253, 253, 253)',\n            // Optionnel : couleur des lignes de la grille\n            lineWidth: 0.5\n          }\n        },\n        y: {\n          ticks: {\n            font: {\n              weight: 'bold'\n            },\n            color: 'white' // Couleur du texte sur l'axe Y\n          },\n          grid: {\n            color: 'rgb(253, 253, 253)',\n            // Optionnel\n            lineWidth: 0.5\n          }\n        }\n      },\n      plugins: {\n        legend: {\n          display: true,\n          position: 'top',\n          labels: {\n            font: {\n              size: 14,\n              family: 'Arial',\n              weight: 'bold'\n            },\n            color: 'white',\n            // Couleur du texte de la légende\n            boxWidth: 15,\n            boxHeight: 5,\n            padding: 20,\n            usePointStyle: true\n          }\n        },\n        zoom: {\n          pan: {\n            enabled: true,\n            mode: 'x'\n          },\n          zoom: {\n            wheel: {\n              enabled: true\n            },\n            pinch: {\n              enabled: true\n            },\n            mode: 'x'\n          }\n        }\n      }\n    };\n  } else {\n    options = {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        x: {\n          ticks: {\n            font: {\n              weight: 'bold'\n            }\n          }\n        }\n      },\n      plugins: {\n        legend: {\n          display: true,\n          position: 'top',\n          // Position de la légende\n          labels: {\n            font: {\n              size: 14,\n              family: 'Arial',\n              weight: 'bold'\n            },\n            boxWidth: 15,\n            boxHeight: 5,\n            marginTop: 10,\n            marginBottom: 10,\n            padding: 20,\n            color: '#333',\n            usePointStyle: true\n          },\n          // Ajout de la bordure autour de la légende entière\n          onBeforeInit: chart => {\n            const legend = chart.legend;\n            legend.boxWidth = 30; // Largeur de la légende (ajustez selon votre besoin)\n            legend.labels.padding = 10; // Espacement entre les labels\n            legend.borderColor = '#333'; // Couleur de la bordure\n            legend.borderWidth = 2; // Largeur de la bordure\n            legend.borderRadius = 5; // Rayon des coins\n            legend.backgroundColor = 'rgba(255, 255, 255, 0.7)'; // Fond de la légende (transparent ou couleur de fond)\n          }\n        },\n        zoom: {\n          pan: {\n            enabled: true,\n            mode: 'x'\n          },\n          zoom: {\n            wheel: {\n              enabled: true\n            },\n            pinch: {\n              enabled: true\n            },\n            mode: 'x'\n          }\n        }\n      }\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n        children: \"historique des \\xC9motions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time-filter\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setTimeRange('24heures'),\n          children: \"1 jour\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 706,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setTimeRange('1semaine'),\n          children: \"1 semaine\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setTimeRange('1mois'),\n          children: \"1 mois\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setTimeRange('3mois'),\n          children: \"3 mois\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setTimeRange('6mois'),\n          children: \"6 mois\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setTimeRange('tout'),\n          children: \"Tout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 705,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: chartData.labels && /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 715,\n          columnNumber: 32\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 714,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"checkbox-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: showFeeling1,\n            onChange: () => setShowFeeling1(!showFeeling1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 763,\n            columnNumber: 13\n          }, this), feelings[0]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 762,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: showFeeling2,\n            onChange: () => setShowFeeling2(!showFeeling2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 771,\n            columnNumber: 13\n          }, this), feelings[1]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 770,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: showFeeling3,\n            onChange: () => setShowFeeling3(!showFeeling3)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 779,\n            columnNumber: 13\n          }, this), feelings[2]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: showFeeling4,\n            onChange: () => setShowFeeling4(!showFeeling4)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 787,\n            columnNumber: 13\n          }, this), feelings[3]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 786,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: showRegles,\n            onChange: () => setShowRegles(!showRegles)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 795,\n            columnNumber: 13\n          }, this), \"R\\xE8gles\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 794,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 761,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"historique-gratitude\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h7\",\n          children: \"Historique des mantras\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 806,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"fenetre-gratitude\",\n          children: historiqueGratitude.length > 0 ? historiqueGratitude.map((phrase, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [phrase, \" : (\", /*#__PURE__*/_jsxDEV(\"em\", {\n                children: [gratitudeDates[index], \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 811,\n                columnNumber: 34\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 811,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n              className: \"hr-phraseGratitude\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 812,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 810,\n            columnNumber: 17\n          }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Aucune phrase de gratitude disponible\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 816,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 807,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 805,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"submit-button-history\",\n          children: \"Emotions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 824,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 823,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"droits\",\n        children: \"\\xA9 2025 myDay. Tous droits r\\xE9serv\\xE9s. Cette application, ainsi que l\\u2019ensemble de son contenu, est prot\\xE9g\\xE9e par les lois en vigueur relatives \\xE0 la propri\\xE9t\\xE9 intellectuelle. Les donn\\xE9es qu\\u2019elle contient sont chiffr\\xE9es afin d\\u2019en garantir la s\\xE9curit\\xE9. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 831,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 703,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 702,\n    columnNumber: 5\n  }, this);\n};\n_s(Historique, \"meFP5pzeYtC068J3H1ER5YZvJ4A=\");\n_c = Historique;\nexport default Historique;\n\n// { \"pseudo\": { \"$eq\": \"qs\"} }\nvar _c;\n$RefreshReg$(_c, \"Historique\");","map":{"version":3,"names":["React","useState","useEffect","Line","axios","LogoutButton","Link","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","zoomPlugin","jsxDEV","_jsxDEV","register","Historique","_s","chartData","setChartData","feelings","setFeelings","phraseGratitude","setPhraseGratitude","historiqueGratitude","setHistoriqueGratitude","gratitudeDates","setDatesGratitude","reglesDates","setReglesDates","theme","setTheme","showFeeling1","setShowFeeling1","showFeeling2","setShowFeeling2","showFeeling3","setShowFeeling3","showFeeling4","setShowFeeling4","showRegles","setShowRegles","timeRange","setTimeRange","filtrerDonneesParTemps","data","range","maintenant","Date","limite","setHours","getHours","setDate","getDate","setMonth","getMonth","filter","entry","userLocalDate","window","scrollTo","fetchUserFeelingsAndHistory","API_URL","location","hostname","feelingsResponse","fetch","method","headers","credentials","feelingsData","json","console","log","document","body","className","prev","JSON","stringify","c","regles","historyResponse","get","withCredentials","historyData","sort","a","b","filteredHistory","labels","map","date","toLocaleDateString","day","month","gratitudeHistory","phrase","trim","_","index","_feelingsData$regles","datasets","label","feeling1","borderColor","borderWidth","pointRadius","pointHoverRadius","pointStyle","fill","hidden","feeling2","feeling3","feeling4","regle","backgroundColor","_feelingsData$regles2","error","options","responsive","maintainAspectRatio","scales","x","ticks","font","weight","color","grid","lineWidth","y","plugins","legend","display","position","size","family","boxWidth","boxHeight","padding","usePointStyle","zoom","pan","enabled","mode","wheel","pinch","marginTop","marginBottom","onBeforeInit","chart","borderRadius","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","checked","onChange","length","to","_c","$RefreshReg$"],"sources":["C:/Users/850_G5/Documents/Formation_Dot_Net/myday/front-end/src/Historique.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport LogoutButton from './LogoutButton'; // Importer le composant LogoutButton\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport zoomPlugin from 'chartjs-plugin-zoom';\r\nChartJS.register(zoomPlugin);\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst Historique = () => {\r\n  const [chartData, setChartData] = useState({});\r\n  const [feelings, setFeelings] = useState([\"\", \"\", \"\", \"\"]);\r\n  const [phraseGratitude, setPhraseGratitude] = useState(\"\");\r\n  const [historiqueGratitude, setHistoriqueGratitude] = useState([]);\r\n  const [gratitudeDates, setDatesGratitude] = useState([]);\r\n  const [reglesDates, setReglesDates] = useState([]);\r\n  const[theme,setTheme]=useState(\"\")\r\n  // const[options,setOptions]=useState({})\r\n  \r\n  const [showFeeling1, setShowFeeling1] = useState(true);\r\n  const [showFeeling2, setShowFeeling2] = useState(true);\r\n  const [showFeeling3, setShowFeeling3] = useState(true);\r\n  const [showFeeling4, setShowFeeling4] = useState(true);\r\n  const [showRegles, setShowRegles] = useState(true);\r\n\r\n  const [timeRange, setTimeRange] = useState('3mois');\r\n\r\nconst filtrerDonneesParTemps = (data, range) => {\r\n  const maintenant = new Date();\r\n  let limite;\r\n\r\n  switch (range) {\r\n    case '24heures':\r\n      limite = new Date(maintenant.setHours(maintenant.getHours() - 24));\r\n      break;\r\n    case '1semaine':\r\n      limite = new Date(maintenant.setDate(maintenant.getDate() - 7));\r\n      break;\r\n      // case '2semaine':\r\n      // limite = new Date(maintenant.setDate(maintenant.getDate() - 14));\r\n      // break;\r\n    case '1mois':\r\n      // limite = new Date(maintenant.setMonth(maintenant.getMonth() - 1));\r\n      limite = new Date(maintenant.setMonth(maintenant.getMonth() - 1));\r\n      break;\r\n    case '3mois':\r\n      // limite = new Date(maintenant.setMonth(maintenant.getMonth() - 3));\r\n      limite = new Date(maintenant.setMonth(maintenant.getMonth() - 3));\r\n      break;\r\n    case '6mois':\r\n      // limite = new Date(maintenant.setMonth(maintenant.getMonth() - 6));\r\n      limite = new Date(maintenant.setMonth(maintenant.getMonth() - 6));\r\n      break;\r\n    default:\r\n      return data;\r\n  }\r\n\r\n  return data.filter(entry => new Date(entry.userLocalDate) >= limite);\r\n};\r\n\r\n\r\n  // useEffect(() => {\r\n  //   const fetchUserFeelingsAndHistory = async () => {\r\n  //     try {\r\n  //       const API_URL =\r\n  //         window.location.hostname === \"localhost\"\r\n  //           ? \"http://localhost:4000\"\r\n  //           : \"https://myday-back.onrender.com\";\r\n\r\n  //       const feelingsResponse = await fetch(`${API_URL}/user-feelings`, {\r\n  //         method: \"GET\",\r\n  //         headers: { \"Content-Type\": \"application/json\" },\r\n  //         credentials: 'include'\r\n  //       });\r\n\r\n  //       const feelingsData = await feelingsResponse.json();\r\n  //       if (feelingsData && feelingsData.feelings) {\r\n  //         setFeelings(feelingsData.feelings);\r\n  //         setPhraseGratitude(feelingsData.phraseGratitude || []);\r\n  //         setReglesDates(feelingsData.regles || []);\r\n  //       }\r\n\r\n  //       const historyResponse = await axios.get(`${API_URL}/user-history`, {\r\n  //         withCredentials: true,\r\n  //       });\r\n\r\n  //       const historyData = historyResponse.data;\r\n  //       historyData.sort((a, b) => new Date(a.userLocalDate) - new Date(b.userLocalDate));\r\n\r\n  //       const labels = historyData.map(entry => {\r\n  //         const date = new Date(entry.userLocalDate);\r\n  //         return date.toLocaleDateString('fr-FR', {\r\n  //           day: '2-digit',\r\n  //           month: 'short',\r\n  //         });\r\n  //       });\r\n\r\n  //       const gratitudeHistory = historyData\r\n  //         .map(entry => entry.phraseGratitude)\r\n  //         .filter(phrase => phrase && phrase.trim() !== \"\");\r\n\r\n  //       const gratitudeDates = historyData\r\n  //         .map(entry => new Date(entry.userLocalDate).toLocaleDateString())\r\n  //         .filter((_, index) => gratitudeHistory[index]);\r\n\r\n  //       setDatesGratitude(gratitudeDates);\r\n  //       setHistoriqueGratitude(gratitudeHistory);\r\n\r\n  //       const data = {\r\n  //         labels,\r\n  //         datasets: [\r\n  //           {\r\n  //             label: feelings[0],\r\n  //             data: historyData.map(entry => entry.feeling1),\r\n  //             borderColor: 'rgba(75, 192, 192, 1)',\r\n  //             borderWidth: 2,\r\n  //             pointRadius: 1,\r\n  //             pointHoverRadius: 4,\r\n  //             fill: false,\r\n  //             hidden: !showFeeling1\r\n  //           },\r\n  //           {\r\n  //             label: feelings[1],\r\n  //             data: historyData.map(entry => entry.feeling2),\r\n  //             borderColor: 'rgba(153, 102, 255, 1)',\r\n  //             borderWidth: 2,\r\n  //             pointRadius: 1,\r\n  //             pointHoverRadius: 4,\r\n  //             fill: false,\r\n  //             hidden: !showFeeling2\r\n  //           },\r\n  //           {\r\n  //             label: feelings[2],\r\n  //             data: historyData.map(entry => entry.feeling3),\r\n  //             borderColor: 'rgba(255, 99, 132, 1)',\r\n  //             borderWidth: 2,\r\n  //             pointRadius: 1,\r\n  //             pointHoverRadius: 4,\r\n  //             fill: false,\r\n  //             hidden: !showFeeling3\r\n  //           },\r\n  //           {\r\n  //             label: feelings[3],\r\n  //             data: historyData.map(entry => entry.feeling4),\r\n  //             borderColor: 'rgba(255, 206, 86, 1)',\r\n  //             borderWidth: 2,\r\n  //             pointRadius: 1,\r\n  //             pointHoverRadius: 4,\r\n  //             fill: false,\r\n  //             hidden: !showFeeling4\r\n  //           },\r\n  //           {\r\n  //             label: 'Règles',\r\n  //             data: reglesDates.map((regle, index) => {\r\n  //               return regle === true ? 0 : null;\r\n  //             }),\r\n  //             borderColor: 'rgba(0, 0, 0, 1)',\r\n  //             backgroundColor: 'rgba(0, 0, 0, 1)',\r\n  //             borderWidth: 4,\r\n  //             pointRadius: 4,\r\n  //             pointHoverRadius: 4,\r\n  //             fill: true,\r\n  //             hidden: !showRegles\r\n  //           }\r\n  //         ],\r\n  //       };\r\n\r\n  //       setChartData(data);\r\n  //     } catch (error) {\r\n  //       console.error(\"Erreur lors de la récupération des données :\", error);\r\n  //     }\r\n  //   };\r\n\r\n  //   fetchUserFeelingsAndHistory();\r\n  // }, [feelings, reglesDates, showFeeling1, showFeeling2, showFeeling3, showFeeling4, showRegles]);\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    const fetchUserFeelingsAndHistory = async () => {\r\n      try {\r\n        const API_URL =\r\n          window.location.hostname === \"localhost\"\r\n            ? \"http://localhost:4000\"\r\n            : \"https://myday-back.onrender.com\";\r\n  \r\n        const feelingsResponse = await fetch(`${API_URL}/user-feelings`, {\r\n          method: \"GET\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          credentials: 'include'\r\n        });\r\n  \r\n        const feelingsData = await feelingsResponse.json();\r\n        console.log(\"theme dans historique !! : \",feelingsData.theme)\r\n        // document.body.className = feelingsData.theme;\r\n        setTheme(feelingsData.theme)\r\n        // setOptions(feelingsData.theme)\r\n        document.body.className = feelingsData.theme;\r\n        // cons.log(\"feelingsData  :\",feelingsData )\r\n        if (feelingsData && feelingsData.feelings) {\r\n          // Ne relance pas setFeelings inutilement si les valeurs sont déjà identiques\r\n          setFeelings(prev => JSON.stringify(prev) !== JSON.stringify(feelingsData.feelings) ? feelingsData.feelings : prev);\r\n          c\r\n          setPhraseGratitude(feelingsData.phraseGratitude || []);\r\n          setReglesDates(feelingsData.regles || []);\r\n        }\r\n  \r\n        const historyResponse = await axios.get(`${API_URL}/user-history`, {\r\n          withCredentials: true,\r\n        });\r\n        // conseol.log(\"historyResponse :\",historyResponse)\r\n        const historyData = historyResponse.data;\r\n        // historyData.sort((a, b) => new Date(a.userLocalDate) - new Date(b.userLocalDate));\r\n        historyData.sort((a, b) => new Date(a.userLocalDate) - new Date(b.userLocalDate));\r\n        const filteredHistory = filtrerDonneesParTemps(historyData, timeRange);\r\n        const labels = filteredHistory.map(entry => {\r\n          const date = new Date(entry.userLocalDate);\r\n          return date.toLocaleDateString('fr-FR', {\r\n            day: '2-digit',\r\n            month: 'short',\r\n          });\r\n        });\r\n  \r\n        const gratitudeHistory = historyData\r\n          .map(entry => entry.phraseGratitude)\r\n          .filter(phrase => phrase && phrase.trim() !== \"\");\r\n  \r\n        const gratitudeDates = historyData\r\n          .map(entry => new Date(entry.userLocalDate).toLocaleDateString())\r\n          .filter((_, index) => gratitudeHistory[index]);\r\n  \r\n        setDatesGratitude(gratitudeDates);\r\n        setHistoriqueGratitude(gratitudeHistory);\r\n        let data={}\r\n        if(feelingsData.theme===\"dark\"){\r\n        data = {\r\n          labels,\r\n          datasets: [\r\n            {\r\n              label: feelingsData.feelings[0],\r\n              data: historyData.map(entry => entry.feeling1),\r\n              borderColor: 'rgba(75, 192, 192, 1)',  // Turquoise\r\n              // borderColor: 'rgb(255, 255, 255)', \r\n              borderWidth: 2,\r\n              pointRadius: 4,  // Plus grand pour mieux se voir\r\n              pointHoverRadius: 8,\r\n              pointStyle: 'circle',  // Type de point : Cercle\r\n              fill: false,\r\n              hidden: !showFeeling1\r\n            },\r\n            {\r\n              label: feelingsData.feelings[1],\r\n              data: historyData.map(entry => entry.feeling2),\r\n              borderColor: 'rgba(153, 102, 255, 1)',  // Violet\r\n              // borderColor: 'rgb(255, 255, 255)',\r\n              borderWidth: 2,\r\n              pointRadius: 4,\r\n              pointHoverRadius: 8,\r\n              pointStyle: 'triangle',  // Type de point : Triangle\r\n              fill: false,\r\n              hidden: !showFeeling2\r\n            },\r\n            {\r\n              label: feelingsData.feelings[2],\r\n              data: historyData.map(entry => entry.feeling3),\r\n              borderColor: 'rgba(255, 99, 132, 1)',  // Rose\r\n              // borderColor: 'rgb(255, 255, 255)',\r\n              borderWidth: 2,\r\n              pointRadius: 4,\r\n              pointHoverRadius: 8,\r\n              pointStyle: 'rect',  // Type de point : Carré\r\n              fill: false,\r\n              hidden: !showFeeling3\r\n            },\r\n            {\r\n              label: feelingsData.feelings[3],\r\n              data: historyData.map(entry => entry.feeling4),\r\n              borderColor: 'rgba(255, 206, 86, 1)',  // Jaune\r\n              // borderColor: 'rgb(255, 255, 255)',\r\n              borderWidth: 2,\r\n              pointRadius: 4,\r\n              pointHoverRadius: 8,\r\n              pointStyle: 'star',  // Type de point : Étoile\r\n              fill: false,\r\n              hidden: !showFeeling4\r\n            },\r\n            {\r\n              label: 'Règles',\r\n              data: feelingsData.regles?.map((regle) => (regle === true ? 0 : null)) || [],\r\n              // borderColor: 'rgb(255, 255, 255)',\r\n              backgroundColor: 'rgb(240, 78, 210)',\r\n              borderColor: 'rgb(223, 215, 215)',\r\n              borderWidth: 2,\r\n              pointRadius: 4,\r\n              pointHoverRadius: 4,\r\n              fill: true,\r\n              hidden: !showRegles\r\n            }\r\n          ],\r\n        };\r\n        }else\r\n        {\r\n        data = {\r\n          labels,\r\n          datasets: [\r\n            {\r\n              label: feelingsData.feelings[0],\r\n              data: historyData.map(entry => entry.feeling1),\r\n              borderColor: 'rgba(75, 192, 192, 1)',  // Turquoise\r\n              borderWidth: 2,\r\n              pointRadius: 4,  // Plus grand pour mieux se voir\r\n              pointHoverRadius: 8,\r\n              pointStyle: 'circle',  // Type de point : Cercle\r\n              fill: false,\r\n              hidden: !showFeeling1\r\n            },\r\n            {\r\n              label: feelingsData.feelings[1],\r\n              data: historyData.map(entry => entry.feeling2),\r\n              borderColor: 'rgba(153, 102, 255, 1)',  // Violet\r\n              borderWidth: 2,\r\n              pointRadius: 4,\r\n              pointHoverRadius: 8,\r\n              pointStyle: 'triangle',  // Type de point : Triangle\r\n              fill: false,\r\n              hidden: !showFeeling2\r\n            },\r\n            {\r\n              label: feelingsData.feelings[2],\r\n              data: historyData.map(entry => entry.feeling3),\r\n              borderColor: 'rgba(255, 99, 132, 1)',  // Rose\r\n              borderWidth: 2,\r\n              pointRadius: 4,\r\n              pointHoverRadius: 8,\r\n              pointStyle: 'rect',  // Type de point : Carré\r\n              fill: false,\r\n              hidden: !showFeeling3\r\n            },\r\n            {\r\n              label: feelingsData.feelings[3],\r\n              data: historyData.map(entry => entry.feeling4),\r\n              borderColor: 'rgba(255, 206, 86, 1)',  // Jaune\r\n              borderWidth: 2,\r\n              pointRadius: 4,\r\n              pointHoverRadius: 8,\r\n              pointStyle: 'star',  // Type de point : Étoile\r\n              fill: false,\r\n              hidden: !showFeeling4\r\n            },\r\n            {\r\n              label: 'Règles',\r\n              data: feelingsData.regles?.map((regle) => (regle === true ? 0 : null)) || [],\r\n              borderColor: 'rgb(0, 0, 0)',\r\n              backgroundColor: 'rgb(0, 0, 0)',\r\n              borderWidth: 2,\r\n              pointRadius: 4,\r\n              pointHoverRadius: 4,\r\n              fill: true,\r\n              hidden: !showRegles\r\n            }\r\n          ],\r\n        };\r\n      }\r\n      // let options={}\r\n      // if(options===\"dark\"){ \r\n      //   options = {\r\n      //     responsive: true,\r\n      //     maintainAspectRatio: false,\r\n      //     scales: {\r\n      //       x: {\r\n      //         ticks: {\r\n      //           font: {\r\n      //             weight: 'bold',\r\n      //           },\r\n      //           color: 'white', // Couleur du texte sur l'axe X\r\n      //         },\r\n      //         grid: {\r\n      //           color: 'rgb(253, 253, 253)', // Optionnel : couleur des lignes de la grille\r\n      //         },\r\n      //       },\r\n      //       y: {\r\n      //         ticks: {\r\n      //           font: {\r\n      //             weight: 'bold',\r\n      //           },\r\n      //           color: 'white', // Couleur du texte sur l'axe Y\r\n      //         },\r\n      //         grid: {\r\n      //           color: 'rgb(253, 253, 253)', // Optionnel\r\n      //         },\r\n      //       },\r\n      //     },\r\n      //     plugins: {\r\n      //       legend: {\r\n      //         display: true,\r\n      //         position: 'top',\r\n      //         labels: {\r\n      //           font: {\r\n      //             size: 14,\r\n      //             family: 'Arial',\r\n      //             weight: 'bold',\r\n      //           },\r\n      //           color: 'white', // Couleur du texte de la légende\r\n      //           boxWidth: 15,\r\n      //           boxHeight: 5,\r\n      //           padding: 20,\r\n      //           usePointStyle: true,\r\n      //         },\r\n      //       },\r\n      //       zoom: {\r\n      //         pan: {\r\n      //           enabled: true,\r\n      //           mode: 'x',\r\n      //         },\r\n      //         zoom: {\r\n      //           wheel: {\r\n      //             enabled: true,\r\n      //           },\r\n      //           pinch: {\r\n      //             enabled: true,\r\n      //           },\r\n      //           mode: 'x',\r\n      //         },\r\n      //       },\r\n      //     },\r\n      //   };        \r\n      // } else {\r\n      //   options = {\r\n      //     responsive: true,\r\n      //     maintainAspectRatio: false,\r\n      //     scales: {\r\n      //       x: {\r\n      //         ticks: {\r\n      //           font: {\r\n      //             weight: 'bold',\r\n      //           },\r\n      //         },\r\n      //       },\r\n      //     },\r\n      //     plugins: {\r\n      //       legend: {\r\n      //         display: true,\r\n      //         position: 'top',  // Position de la légende\r\n      //         labels: {\r\n      //           font: {\r\n      //             size: 14,\r\n      //             family: 'Arial',\r\n      //             weight: 'bold',\r\n      //           },\r\n      //           boxWidth: 15,\r\n      //           boxHeight: 5,\r\n      //           marginTop: 10,\r\n      //           marginBottom: 10,\r\n      //           padding: 20,\r\n      //           color: '#333',\r\n      //           usePointStyle: true,\r\n      //         },\r\n      //         // Ajout de la bordure autour de la légende entière\r\n      //         onBeforeInit: (chart) => {\r\n      //           const legend = chart.legend;\r\n      //           legend.boxWidth = 30;  // Largeur de la légende (ajustez selon votre besoin)\r\n      //           legend.labels.padding = 10;  // Espacement entre les labels\r\n      //           legend.borderColor = '#333';  // Couleur de la bordure\r\n      //           legend.borderWidth = 2;  // Largeur de la bordure\r\n      //           legend.borderRadius = 5;  // Rayon des coins\r\n      //           legend.backgroundColor = 'rgba(255, 255, 255, 0.7)';  // Fond de la légende (transparent ou couleur de fond)\r\n      //         },\r\n      //       },\r\n      //       zoom: {\r\n      //         pan: {\r\n      //           enabled: true,\r\n      //           mode: 'x',\r\n      //         },\r\n      //         zoom: {\r\n      //           wheel: {\r\n      //             enabled: true,\r\n      //           },\r\n      //           pinch: {\r\n      //             enabled: true,\r\n      //           },\r\n      //           mode: 'x',\r\n      //         },\r\n      //       },\r\n      //     },\r\n      //   };\r\n      // }\r\n\r\n  \r\n        setChartData(data);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des données :\", error);\r\n      }\r\n    };\r\n  \r\n    fetchUserFeelingsAndHistory();\r\n  }, [showFeeling1, showFeeling2, showFeeling3, showFeeling4, showRegles,timeRange]);\r\n  \r\n  // const options = {\r\n  //   responsive: true,\r\n  //   maintainAspectRatio: false,\r\n  //   scales: {\r\n  //     x: {\r\n  //       ticks: {\r\n  //         font: {\r\n  //           weight: 'bold',\r\n  //         },\r\n  //       },\r\n  //     },\r\n  //   },\r\n  //   plugins: {\r\n  //     legend: {\r\n  //       display: true,\r\n  //       position: 'top',  // Position de la légende\r\n  //       labels: {\r\n  //         font: {\r\n  //           size: 14,\r\n  //           family: 'Arial',\r\n  //           weight: 'bold',\r\n  //         },\r\n  //         boxWidth: 15,\r\n  //         boxHeight: 5,\r\n  //         marginTop: 10,\r\n  //         marginBottom: 10,\r\n  //         padding: 20,\r\n  //         color: '#333',\r\n  //         usePointStyle: true,\r\n  //       },\r\n  //       // Ajout de la bordure autour de la légende entière\r\n  //       onBeforeInit: (chart) => {\r\n  //         const legend = chart.legend;\r\n  //         legend.boxWidth = 30;  // Largeur de la légende (ajustez selon votre besoin)\r\n  //         legend.labels.padding = 10;  // Espacement entre les labels\r\n  //         legend.borderColor = '#333';  // Couleur de la bordure\r\n  //         legend.borderWidth = 2;  // Largeur de la bordure\r\n  //         legend.borderRadius = 5;  // Rayon des coins\r\n  //         legend.backgroundColor = 'rgba(255, 255, 255, 0.7)';  // Fond de la légende (transparent ou couleur de fond)\r\n  //       },\r\n  //     },\r\n  //     zoom: {\r\n  //       pan: {\r\n  //         enabled: true,\r\n  //         mode: 'x',\r\n  //       },\r\n  //       zoom: {\r\n  //         wheel: {\r\n  //           enabled: true,\r\n  //         },\r\n  //         pinch: {\r\n  //           enabled: true,\r\n  //         },\r\n  //         mode: 'x',\r\n  //       },\r\n  //     },\r\n  //   },\r\n  // };\r\n  let options={}\r\n  if(theme===\"dark\"){ \r\n    options = {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      scales: {\r\n        x: {\r\n          ticks: {\r\n            font: {\r\n              weight: 'bold',\r\n            },\r\n            color: 'white', // Couleur du texte sur l'axe X\r\n          },\r\n          grid: {\r\n            color: 'rgb(253, 253, 253)', // Optionnel : couleur des lignes de la grille\r\n            lineWidth: 0.5,\r\n          },\r\n        },\r\n        y: {\r\n          ticks: {\r\n            font: {\r\n              weight: 'bold',\r\n            },\r\n            color: 'white', // Couleur du texte sur l'axe Y\r\n          },\r\n          grid: {\r\n            color: 'rgb(253, 253, 253)', // Optionnel\r\n            lineWidth: 0.5,\r\n          },\r\n        },\r\n      },\r\n      plugins: {\r\n        legend: {\r\n          display: true,\r\n          position: 'top',\r\n          labels: {\r\n            font: {\r\n              size: 14,\r\n              family: 'Arial',\r\n              weight: 'bold',\r\n            },\r\n            color: 'white', // Couleur du texte de la légende\r\n            boxWidth: 15,\r\n            boxHeight: 5,\r\n            padding: 20,\r\n            usePointStyle: true,\r\n          },\r\n        },\r\n        zoom: {\r\n          pan: {\r\n            enabled: true,\r\n            mode: 'x',\r\n          },\r\n          zoom: {\r\n            wheel: {\r\n              enabled: true,\r\n            },\r\n            pinch: {\r\n              enabled: true,\r\n            },\r\n            mode: 'x',\r\n          },\r\n        },\r\n      },\r\n    };        \r\n  } else {\r\n  options = {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      scales: {\r\n        x: {\r\n          ticks: {\r\n            font: {\r\n              weight: 'bold',\r\n            },\r\n          },\r\n        },\r\n      },\r\n      plugins: {\r\n        legend: {\r\n          display: true,\r\n          position: 'top',  // Position de la légende\r\n          labels: {\r\n            font: {\r\n              size: 14,\r\n              family: 'Arial',\r\n              weight: 'bold',\r\n            },\r\n            boxWidth: 15,\r\n            boxHeight: 5,\r\n            marginTop: 10,\r\n            marginBottom: 10,\r\n            padding: 20,\r\n            color: '#333',\r\n            usePointStyle: true,\r\n          },\r\n          // Ajout de la bordure autour de la légende entière\r\n          onBeforeInit: (chart) => {\r\n            const legend = chart.legend;\r\n            legend.boxWidth = 30;  // Largeur de la légende (ajustez selon votre besoin)\r\n            legend.labels.padding = 10;  // Espacement entre les labels\r\n            legend.borderColor = '#333';  // Couleur de la bordure\r\n            legend.borderWidth = 2;  // Largeur de la bordure\r\n            legend.borderRadius = 5;  // Rayon des coins\r\n            legend.backgroundColor = 'rgba(255, 255, 255, 0.7)';  // Fond de la légende (transparent ou couleur de fond)\r\n          },\r\n        },\r\n        zoom: {\r\n          pan: {\r\n            enabled: true,\r\n            mode: 'x',\r\n          },\r\n          zoom: {\r\n            wheel: {\r\n              enabled: true,\r\n            },\r\n            pinch: {\r\n              enabled: true,\r\n            },\r\n            mode: 'x',\r\n          },\r\n        },\r\n      },\r\n    };\r\n  }\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <h6>historique des Émotions</h6>\r\n        <div className=\"time-filter\">\r\n        <button onClick={() => setTimeRange('24heures')}>1 jour</button>\r\n          <button onClick={() => setTimeRange('1semaine')}>1 semaine</button>\r\n          {/* <button onClick={() => setTimeRange('2semaine')}>2 semaines</button> */}\r\n          <button onClick={() => setTimeRange('1mois')}>1 mois</button>\r\n          <button onClick={() => setTimeRange('3mois')}>3 mois</button>\r\n          <button onClick={() => setTimeRange('6mois')}>6 mois</button>\r\n          <button onClick={() => setTimeRange('tout')}>Tout</button>\r\n        </div>\r\n        <div className=\"chart-container\">\r\n          {chartData.labels && <Line data={chartData} options={options} />}\r\n        </div>\r\n        \r\n\r\n        {/* <div className=\"checkbox-container\">\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showFeeling1}\r\n              onChange={() => setShowFeeling1(!showFeeling1)}\r\n            />\r\n            {feelings[0]}\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showFeeling2}\r\n              onChange={() => setShowFeeling2(!showFeeling2)}\r\n            />\r\n            {feelings[1]}\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showFeeling3}\r\n              onChange={() => setShowFeeling3(!showFeeling3)}\r\n            />\r\n            {feelings[2]}\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showFeeling4}\r\n              onChange={() => setShowFeeling4(!showFeeling4)}\r\n            />\r\n            {feelings[3]}\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showRegles}\r\n              onChange={() => setShowRegles(!showRegles)}\r\n            />\r\n            Menstruation\r\n          </label>\r\n        </div> */}\r\n        <div className=\"checkbox-container\">\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showFeeling1}\r\n              onChange={() => setShowFeeling1(!showFeeling1)}\r\n            />\r\n            {feelings[0]}\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showFeeling2}\r\n              onChange={() => setShowFeeling2(!showFeeling2)}\r\n            />\r\n            {feelings[1]}\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showFeeling3}\r\n              onChange={() => setShowFeeling3(!showFeeling3)}\r\n            />\r\n            {feelings[2]}\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showFeeling4}\r\n              onChange={() => setShowFeeling4(!showFeeling4)}\r\n            />\r\n            {feelings[3]}\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showRegles}\r\n              onChange={() => setShowRegles(!showRegles)}\r\n            />\r\n            Règles\r\n          </label>\r\n        </div>\r\n\r\n\r\n        <div className=\"historique-gratitude\">\r\n          <div className='h7'>Historique des mantras</div>\r\n          <div className='fenetre-gratitude'>\r\n            {historiqueGratitude.length > 0 ? (\r\n              historiqueGratitude.map((phrase, index) => (\r\n                <div key={index}>\r\n                  <p>{phrase} : (<em>{gratitudeDates[index]})</em></p>\r\n                  <hr className=\"hr-phraseGratitude\" />\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <li>Aucune phrase de gratitude disponible</li>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        <Link to=\"/\">\r\n          <button type=\"button\" className=\"submit-button-history\">\r\n            Emotions\r\n          </button>\r\n        </Link>\r\n        {/* <div className=\"button-container\">\r\n          <LogoutButton />\r\n        </div> */}\r\n        <p className =\"droits\">© 2025 myDay. Tous droits réservés.\r\n        Cette application, ainsi que l’ensemble de son contenu, est protégée par les lois en vigueur relatives à la propriété intellectuelle. Les données qu’elle contient sont chiffrées afin d’en garantir la sécurité. </p>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Historique;\r\n\r\n// { \"pseudo\": { \"$eq\": \"qs\"} }\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}