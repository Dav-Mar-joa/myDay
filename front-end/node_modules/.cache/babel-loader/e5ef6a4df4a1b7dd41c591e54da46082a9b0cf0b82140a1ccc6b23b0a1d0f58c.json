{"ast":null,"code":"import React,{useEffect,useState}from'react';import'./styles/Home.css';import'./styles/Mobile.css';import{Link}from'react-router-dom';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function Settings(){const[feelings,setFeelings]=useState([]);const[editingIndex,setEditingIndex]=useState(null);const[modifiedFeelings,setModifiedFeelings]=useState({});const[selectedOption,setSelectedOption]=useState('');// Ajouté pour gérer le thème\nconst[pseudo,setPseudo]=useState(\"\");const[notification,setNotification]=useState('');const handleSelectionChange=e=>{console.log(\"1\");const newTheme=e.target.value;setSelectedOption(newTheme);document.body.className=newTheme;console.log(\"theme !!!!! \",newTheme);// const pseudo = localStorage.getItem('username',\"qs\");\n// const pseudo = \"aa\";\nconsole.log(\"localStorage avant /setTheme!!!!! \",localStorage);if(pseudo){fetch('/setTheme',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({pseudo,theme:newTheme})}).then(res=>res.json()).then(data=>{console.log(\"set theme data\",data);if(!data.success){console.error(\"Échec de l'enregistrement du thème.\");}}).catch(err=>console.error(\"Erreur en envoyant le thème :\",err));}};useEffect(()=>{fetch('/getFeelings').then(res=>res.json()).then(data=>{setFeelings(data.feelings);// setPseudo(data.pseudo);\nconsole.log(\"2\");console.log(\"--------------->>>>>> >>>>>>>>>> -------------\");const donnees=data;console.log(\"data :\",donnees);const pseudo2=data.pseudo;// Récupérer le pseudo depuis les données\nconsole.log(\"pseudo récupéré depuis /getFeelings :\",pseudo2);console.log(\"--------------->>>>>> >>>>>>>>>> -------------\");setPseudo(pseudo2);}).catch(err=>console.error(\"Erreur en récupérant les émotions :\",err));// Charger le thème depuis la base\n// const pseudo = localStorage.getItem('username');\n// const pseudo = 'aa';\nconsole.log(\"localStorage avant /getTheme!!!!! \",localStorage);if(pseudo){fetch('/getTheme',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({pseudo})}).then(res=>res.json()).then(data=>{if(data.success&&data.theme){setSelectedOption(data.theme);document.body.className=data.theme;}}).catch(err=>console.error(\"Erreur en récupérant le thème :\",err));}},[]);useEffect(()=>{if(pseudo){fetch('/getTheme',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({pseudo})}).then(res=>res.json()).then(data=>{if(data.success&&data.theme){setSelectedOption(data.theme);document.body.className=data.theme;}}).catch(err=>console.error(\"Erreur en récupérant le thème :\",err));}},[pseudo]);// Se déclenche uniquement quand pseudo est défini\nconst handleInputChange=(index,value)=>{setModifiedFeelings(prev=>({...prev,[index]:value}));};// const updateFeeling = (index) => {\n//     const newFeeling = modifiedFeelings[index];\n//     if (!newFeeling) return;\n//     fetch('/updateFeeling', {\n//         method: 'POST',\n//         headers: {\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({ index, newFeeling })\n//     })\n//     .then(res => res.json())\n//     .then(data => {\n//         if (data.success) {\n//             const updatedFeelings = [...feelings];\n//             updatedFeelings[index] = newFeeling;\n//             setFeelings(updatedFeelings);\n//             setEditingIndex(null);\n//             setModifiedFeelings({});\n//         } else {\n//             console.error(\"Erreur côté serveur :\", data.message);\n//         }\n//     })\n//     .catch(err => console.error(\"Erreur en mettant à jour :\", err));\n// };\n// const updateFeeling = (index) => {\n//     const newFeeling = modifiedFeelings[index];\n//     if (!newFeeling) return;\n//     fetch('/updateFeeling', {\n//         method: 'POST',\n//         headers: {\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({ index, newFeeling })\n//     })\n//     .then(res => res.json())\n//     .then(data => {\n//         if (data.success) {\n//             const updatedFeelings = [...feelings];\n//             console.log(\"updatedFeelings : \",updatedFeelings)\n//             updatedFeelings[index] = newFeeling;\n//             console.log(\"updatedFeelings [index] : \",updatedFeelings[index])\n//             setFeelings(updatedFeelings);           // met à jour l'affichage\n//             setEditingIndex(null);                  // quitte le mode édition\n//             setModifiedFeelings(prev => {\n//                 const updated = { ...prev };\n//                 console.log(\"upadated : \",updated)\n//                 delete updated[index]; \n//                 const del = delete updated[index];\n//                 console.log(\"del : \",del)             // nettoie le champ modifié\n//                 return updated;\n//             });\n//         } else {\n//             console.error(\"Erreur côté serveur :\", data.message);\n//         }\n//     })\n//     .catch(err => console.error(\"Erreur en mettant à jour :\", err));\n// };\nconst updateFeeling=index=>{const newFeeling=modifiedFeelings[index];if(!newFeeling)return;// Mise à jour optimiste : applique la modification localement\nconst updatedFeelings=[...feelings];updatedFeelings[index]=newFeeling;setFeelings(updatedFeelings);// Maintenant on envoie la mise à jour au serveur\nfetch('/updateFeeling',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({index,newFeeling})}).then(res=>res.json()).then(data=>{if(!data.success){setNotification(\"Émotion modifiée !\");setTimeout(()=>setNotification(''),3000);// En cas d'erreur côté serveur, on peut restaurer l'état initial\nconsole.error(\"Erreur côté serveur :\",data.message);// Vous pouvez ajouter une logique pour restaurer l'état initial des émotions en cas d'erreur\n}else{// On quitte le mode édition si la mise à jour est réussie\nsetEditingIndex(null);setModifiedFeelings(prev=>{const updated={...prev};delete updated[index];return updated;});}}).catch(err=>{console.error(\"Erreur en mettant à jour :\",err);// Restauration si l'erreur vient du serveur\n});};return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"header\",children:/*#__PURE__*/_jsxs(\"h1\",{children:[/*#__PURE__*/_jsx(\"span\",{children:\"m\"}),/*#__PURE__*/_jsx(\"span\",{children:\"y\"}),/*#__PURE__*/_jsx(\"span\",{children:\"D\"}),/*#__PURE__*/_jsx(\"span\",{children:\"a\"}),/*#__PURE__*/_jsx(\"span\",{children:\"y\"})]})}),/*#__PURE__*/_jsx(\"h5\",{children:\"Theme : \"}),/*#__PURE__*/_jsxs(\"select\",{id:\"theme-select\",className:\"theme-select\",value:selectedOption,onChange:handleSelectionChange,children:[/*#__PURE__*/_jsx(\"option\",{value:\"colorful\",children:\"Printemps\"}),/*#__PURE__*/_jsx(\"option\",{value:\"ocean\",children:\"Oc\\xE9an\"}),/*#__PURE__*/_jsx(\"option\",{value:\"dark\",children:\"Sombre\"})]}),/*#__PURE__*/_jsx(\"h5\",{children:\"Emotions :\"}),/*#__PURE__*/_jsx(\"ol\",{children:feelings.map((f,index)=>{var _modifiedFeelings$ind;return/*#__PURE__*/_jsxs(\"ol\",{children:[editingIndex===index?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"input\",{className:\"inputFeelingsSettings\",type:\"text\",value:(_modifiedFeelings$ind=modifiedFeelings[index])!==null&&_modifiedFeelings$ind!==void 0?_modifiedFeelings$ind:f,onChange:e=>handleInputChange(index,e.target.value)}),/*#__PURE__*/_jsx(\"button\",{className:\"button-option\",onClick:()=>updateFeeling(index),children:\"\\u2714\\uFE0F\"}),/*#__PURE__*/_jsx(\"button\",{className:\"button-option\",onClick:()=>{setEditingIndex(null);setModifiedFeelings(prev=>{const updated={...prev};delete updated[index];return updated;});},children:\"\\u274C\"}),notification&&/*#__PURE__*/_jsx(\"div\",{className:\"popup-success-emotions\",children:notification})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[f,/*#__PURE__*/_jsx(\"button\",{className:\"button-option\",onClick:()=>setEditingIndex(index),children:\"\\u270F\\uFE0F\"})]}),index<feelings.length-1&&/*#__PURE__*/_jsx(\"hr\",{className:\"hr-settings\"})]},index);})}),/*#__PURE__*/_jsx(Link,{to:\"/EmotionsSettings\",children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"submit-button\",children:\"Roue des \\xE9motions\"})}),/*#__PURE__*/_jsx(\"hr\",{className:\"hr\"}),/*#__PURE__*/_jsx(Link,{to:\"/\",children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"submit-button\",children:\"Mes \\xE9motions\"})}),/*#__PURE__*/_jsx(\"p\",{className:\"droits\",children:\"\\xA9 2025 myDay. Tous droits r\\xE9serv\\xE9s. Cette application, ainsi que l\\u2019ensemble de son contenu, est prot\\xE9g\\xE9e par les lois en vigueur relatives \\xE0 la propri\\xE9t\\xE9 intellectuelle. Les donn\\xE9es qu\\u2019elle contient sont chiffr\\xE9es afin d\\u2019en garantir la s\\xE9curit\\xE9.\"})]});}export default Settings;","map":{"version":3,"names":["React","useEffect","useState","Link","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Settings","feelings","setFeelings","editingIndex","setEditingIndex","modifiedFeelings","setModifiedFeelings","selectedOption","setSelectedOption","pseudo","setPseudo","notification","setNotification","handleSelectionChange","e","console","log","newTheme","target","value","document","body","className","localStorage","fetch","method","headers","JSON","stringify","theme","then","res","json","data","success","error","catch","err","donnees","pseudo2","handleInputChange","index","prev","updateFeeling","newFeeling","updatedFeelings","setTimeout","message","updated","children","id","onChange","map","f","_modifiedFeelings$ind","type","onClick","length","to"],"sources":["C:/Users/850_G5/Documents/Formation_Dot_Net/myday/front-end/src/Settings.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './styles/Home.css';\r\nimport './styles/Mobile.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Settings() {\r\n    const [feelings, setFeelings] = useState([]);\r\n    const [editingIndex, setEditingIndex] = useState(null);\r\n    const [modifiedFeelings, setModifiedFeelings] = useState({});\r\n    const [selectedOption, setSelectedOption] = useState(''); // Ajouté pour gérer le thème\r\n    const [pseudo, setPseudo] = useState(\"\");\r\n    const [notification, setNotification] = useState('');\r\n\r\n    const handleSelectionChange = (e) => {\r\n        console.log(\"1\")\r\n        const newTheme = e.target.value;\r\n        setSelectedOption(newTheme);\r\n        document.body.className = newTheme;\r\n        console.log(\"theme !!!!! \", newTheme)\r\n        // const pseudo = localStorage.getItem('username',\"qs\");\r\n        // const pseudo = \"aa\";\r\n        console.log(\"localStorage avant /setTheme!!!!! \", localStorage )\r\n        \r\n        if (pseudo) {\r\n            fetch('/setTheme', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ pseudo, theme: newTheme }),\r\n            })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(\"set theme data\",data)\r\n                if (!data.success) {\r\n                    console.error(\"Échec de l'enregistrement du thème.\");\r\n                }\r\n            })\r\n            .catch(err => console.error(\"Erreur en envoyant le thème :\", err));\r\n        }\r\n    };\r\n    \r\n\r\n    useEffect(() => {\r\n        \r\n        fetch('/getFeelings')\r\n        .then(res => res.json())\r\n        .then(data => {\r\n\r\n            \r\n            setFeelings(data.feelings)\r\n            // setPseudo(data.pseudo);\r\n            console.log(\"2\")\r\n            console.log(\"--------------->>>>>> >>>>>>>>>> -------------\")\r\n            const donnees = data\r\n            console.log(\"data :\", donnees);\r\n            const pseudo2 = data.pseudo;  // Récupérer le pseudo depuis les données\r\n            console.log(\"pseudo récupéré depuis /getFeelings :\", pseudo2);\r\n            console.log(\"--------------->>>>>> >>>>>>>>>> -------------\")\r\n            setPseudo(pseudo2);\r\n        })\r\n        .catch(err => console.error(\"Erreur en récupérant les émotions :\", err));\r\n\r\n    // Charger le thème depuis la base\r\n    // const pseudo = localStorage.getItem('username');\r\n    // const pseudo = 'aa';\r\n    console.log(\"localStorage avant /getTheme!!!!! \", localStorage)\r\n    if (pseudo) {\r\n        fetch('/getTheme', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ pseudo })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (data.success && data.theme) {\r\n                setSelectedOption(data.theme);\r\n                document.body.className = data.theme;\r\n            }\r\n        })\r\n     \r\n        .catch(err => console.error(\"Erreur en récupérant le thème :\", err));\r\n    }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (pseudo) {\r\n            fetch('/getTheme', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ pseudo })\r\n            })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if (data.success && data.theme) {\r\n                    setSelectedOption(data.theme);\r\n                    document.body.className = data.theme;\r\n                }\r\n            })\r\n            .catch(err => console.error(\"Erreur en récupérant le thème :\", err));\r\n        }\r\n    }, [pseudo]); // Se déclenche uniquement quand pseudo est défini\r\n    \r\n\r\n    const handleInputChange = (index, value) => {\r\n        setModifiedFeelings(prev => ({\r\n            ...prev,\r\n            [index]: value\r\n        }));\r\n    };\r\n\r\n\r\n    // const updateFeeling = (index) => {\r\n    //     const newFeeling = modifiedFeelings[index];\r\n    //     if (!newFeeling) return;\r\n\r\n    //     fetch('/updateFeeling', {\r\n    //         method: 'POST',\r\n    //         headers: {\r\n    //             'Content-Type': 'application/json'\r\n    //         },\r\n    //         body: JSON.stringify({ index, newFeeling })\r\n    //     })\r\n    //     .then(res => res.json())\r\n    //     .then(data => {\r\n    //         if (data.success) {\r\n    //             const updatedFeelings = [...feelings];\r\n    //             updatedFeelings[index] = newFeeling;\r\n    //             setFeelings(updatedFeelings);\r\n    //             setEditingIndex(null);\r\n    //             setModifiedFeelings({});\r\n    //         } else {\r\n    //             console.error(\"Erreur côté serveur :\", data.message);\r\n    //         }\r\n    //     })\r\n    //     .catch(err => console.error(\"Erreur en mettant à jour :\", err));\r\n    // };\r\n    // const updateFeeling = (index) => {\r\n    //     const newFeeling = modifiedFeelings[index];\r\n    //     if (!newFeeling) return;\r\n    \r\n    //     fetch('/updateFeeling', {\r\n    //         method: 'POST',\r\n    //         headers: {\r\n    //             'Content-Type': 'application/json'\r\n    //         },\r\n    //         body: JSON.stringify({ index, newFeeling })\r\n    //     })\r\n    //     .then(res => res.json())\r\n    //     .then(data => {\r\n    //         if (data.success) {\r\n    //             const updatedFeelings = [...feelings];\r\n    //             console.log(\"updatedFeelings : \",updatedFeelings)\r\n    //             updatedFeelings[index] = newFeeling;\r\n    //             console.log(\"updatedFeelings [index] : \",updatedFeelings[index])\r\n    //             setFeelings(updatedFeelings);           // met à jour l'affichage\r\n    //             setEditingIndex(null);                  // quitte le mode édition\r\n    //             setModifiedFeelings(prev => {\r\n    //                 const updated = { ...prev };\r\n    //                 console.log(\"upadated : \",updated)\r\n    //                 delete updated[index]; \r\n    //                 const del = delete updated[index];\r\n    //                 console.log(\"del : \",del)             // nettoie le champ modifié\r\n    //                 return updated;\r\n    //             });\r\n    //         } else {\r\n    //             console.error(\"Erreur côté serveur :\", data.message);\r\n    //         }\r\n    //     })\r\n    //     .catch(err => console.error(\"Erreur en mettant à jour :\", err));\r\n    // };\r\n\r\n    const updateFeeling = (index) => {\r\n        const newFeeling = modifiedFeelings[index];\r\n        if (!newFeeling) return;\r\n    \r\n        // Mise à jour optimiste : applique la modification localement\r\n        const updatedFeelings = [...feelings];\r\n        updatedFeelings[index] = newFeeling;\r\n        setFeelings(updatedFeelings);\r\n    \r\n        // Maintenant on envoie la mise à jour au serveur\r\n        fetch('/updateFeeling', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ index, newFeeling })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if (!data.success) {\r\n                setNotification(\"Émotion modifiée !\");\r\n                setTimeout(() => setNotification(''), 3000);\r\n                // En cas d'erreur côté serveur, on peut restaurer l'état initial\r\n                console.error(\"Erreur côté serveur :\", data.message);\r\n                // Vous pouvez ajouter une logique pour restaurer l'état initial des émotions en cas d'erreur\r\n            } else {\r\n                // On quitte le mode édition si la mise à jour est réussie\r\n                setEditingIndex(null);\r\n                setModifiedFeelings(prev => {\r\n                    const updated = { ...prev };\r\n                    delete updated[index];\r\n                    return updated;\r\n                });\r\n            }\r\n        })\r\n        .catch(err => {\r\n            console.error(\"Erreur en mettant à jour :\", err);\r\n            // Restauration si l'erreur vient du serveur\r\n        });\r\n    };\r\n    \r\n    \r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"header\">\r\n                <h1>\r\n                    <span>m</span><span>y</span><span>D</span><span>a</span><span>y</span>\r\n                </h1>\r\n            </div>\r\n            \r\n            <h5>Theme : </h5>\r\n            {/* <select id=\"theme-select\" class=\"theme-select\">\r\n            <option value=\"colorful\">Coloré</option>\r\n            <option value=\"dark\">not dev</option>\r\n            </select> */}\r\n\r\n            <select id=\"theme-select\" className=\"theme-select\" value={selectedOption} onChange={handleSelectionChange}>\r\n                <option value=\"colorful\">Printemps</option>\r\n                <option value=\"ocean\">Océan</option>\r\n                <option value=\"dark\">Sombre</option>\r\n            </select>\r\n\r\n            <h5>Emotions :</h5>\r\n            <ol>\r\n                {/* {feelings.map((f, index) => (\r\n                    <ol key={index}>\r\n                        {editingIndex === index ? (\r\n                            <>\r\n                                <input\r\n                                    className='inputFeelingsSettings'\r\n                                    type=\"text\"\r\n                                    defaultValue={f}\r\n                                    onChange={(e) => handleInputChange(index, e.target.value)}\r\n                                />\r\n                                \r\n                                <button \r\n                                    className=\"button-option\"\r\n                                    onClick={() => {updateFeeling(index)\r\n                                                    index=false\r\n                                    }\r\n                                    \r\n                                    }>✔️</button>\r\n                                <button \r\n                                    className=\"button-option\"\r\n                                    onClick={() => {setEditingIndex(null)\r\n                                                    index=false}\r\n                                    }>❌</button>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                {f}\r\n                                <button \r\n                                    className=\"button-option\"\r\n                                    onClick={() => setEditingIndex(index)}>✏️</button>\r\n                            </>\r\n                        )}\r\n                         {index < feelings.length - 1 && <hr className=\"hr-settings\" />}\r\n                    </ol>\r\n                    \r\n                ))} */}\r\n                {feelings.map((f, index) => (\r\n                    <ol key={index}>\r\n                        {editingIndex === index ? (\r\n                            <>\r\n                                <input\r\n                                    className='inputFeelingsSettings'\r\n                                    type=\"text\"\r\n                                    value={modifiedFeelings[index] ?? f}\r\n                                    onChange={(e) => handleInputChange(index, e.target.value)}\r\n                                />\r\n                                <button \r\n                                    className=\"button-option\"\r\n                                    onClick={() => updateFeeling(index)}\r\n                                >✔️\r\n                                </button>\r\n                               \r\n                                <button \r\n                                    className=\"button-option\"\r\n                                    onClick={() => {\r\n                                        setEditingIndex(null);\r\n                                        setModifiedFeelings(prev => {\r\n                                            const updated = { ...prev };\r\n                                            delete updated[index];\r\n                                            return updated;\r\n                                        });\r\n                                    }}\r\n                                >❌</button>\r\n                                 {notification && <div className=\"popup-success-emotions\">{notification}</div>}\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                {f}\r\n                                <button \r\n                                    className=\"button-option\"\r\n                                    onClick={() => setEditingIndex(index)}\r\n                                >✏️</button>\r\n                            </>\r\n                        )}\r\n                        {index < feelings.length - 1 && <hr className=\"hr-settings\" />}\r\n                    </ol>\r\n                ))}\r\n\r\n            </ol>\r\n\r\n            <Link to=\"/EmotionsSettings\">\r\n                <button type=\"button\" className=\"submit-button\">Roue des émotions</button>\r\n            </Link>\r\n\r\n            <hr className=\"hr\" />\r\n\r\n            <Link to=\"/\">\r\n                <button type=\"button\" className=\"submit-button\">Mes émotions</button>\r\n            </Link>\r\n\r\n           \r\n\r\n            <p className=\"droits\">\r\n                © 2025 myDay. Tous droits réservés. Cette application, ainsi que l’ensemble de son contenu, est protégée par les lois en vigueur relatives à la propriété intellectuelle. Les données qu’elle contient sont chiffrées afin d’en garantir la sécurité.\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}